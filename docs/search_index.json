[["index.html", "Quality of Location - developing a new pitch metric Chapter 1 Introduction 1.1 Project Overview", " Quality of Location - developing a new pitch metric Doug Rose 2023-12-16 Chapter 1 Introduction 1.1 Project Overview In recent years, the baseball industry has undergone a transformative shift towards a more data-driven approach. Organizations now heavily rely on advanced metrics and statistical analyses for crucial decision-making processes. This evolution has provided fans with an abundance of new insights into evaluating MLB players. With technologies like Statcast generating extensive data on ball movement, enthusiasts can now gain a clearer understanding of key metrics such as release speed, spin rate, and pitch movement’s horizontal and vertical components, influencing a pitcher’s throw quality. Websites like Baseball Savant and Fangraphs contribute significantly by offering comprehensive information on MLB pitchers, covering aspects such as batted ball results, the effectiveness of pitch arsenals, and detailed profiles of each pitch type, including velocity, movement, and spin rate. The wealth of available analytics related to MLB players in 2023 is unprecedented. In my exploration of emerging baseball metrics aimed at painting a comprehensive picture of a pitcher’s skill or an individual pitch’s quality, I’ve identified an often-underrepresented aspect: pitch-level location quality. While metrics like BB% and FIP provide insights into overall pitching proficiency, I’ve yet to encounter a metric that assesses pitchers based on the quality of the locations they choose for their pitches. The Baseball Savant website features player dashboards displaying distributions of a pitcher’s pitches across different location zone types, including heart, shadow, chase, and waste. However, comparing pitchers based on their distribution of zone types is not straightforward. One might assume that the shadow region represents an ideal pitch location, suggesting that pitchers with a higher rate of shadow region pitches are the best at locating their pitches. However, the context matters. For instance, a pitch thrown in the shadow region on a 3-0 count might not be an ideal location if it’s technically outside the strike zone. Furthermore, pitch type plays a crucial role in evaluating location quality. A 4-seam fastball thrown at the top of the strike zone in a 2-0 count may differ significantly in location quality from a curveball thrown in the same location under similar circumstances. Recognizing these nuances is essential, indicating that evaluating pitch location quality is a complex task influenced by the specific circumstances in which the pitch is made. The goal of this project is to create a pitch-level metric that assesses the quality of an individual pitch’s location. Several factors contribute to this metric, including the horizontal distance from the plate as the ball passes (plate_x), the vertical height of the ball from the ground as it passes (plate_z), the pitch type, and the hitter count when the pitch is thrown (0-1, 2-2, 3-2, etc.). By visualizing the output and comparing pitches under different circumstances, we aim to identify ideal pitch locations given specific situations and distinguish less-than-ideal locations. This output can then be applied to pitches thrown in previous seasons by particular players, enabling effective comparisons of players based on their proficiency in locating pitches. Questions regarding a player’s proficiency in locating specific pitch types and the trajectory of their overall pitch location over time can be answered using this new location quality metric. Let’s embark on this exploration. "],["extracting-cleaning-validating-transforming.html", "Chapter 2 Extracting, Cleaning, Validating, Transforming 2.1 Extracting Dataset 2.2 Explain Variables of Interest 2.3 Create New Variables 2.4 Validating Count, Handedness, Game Year 2.5 Remove and Transform Event Values 2.6 Event Outcome Frequency by Count 2.7 Average Delta Run Expectancy 2.8 Join Lookup Table to Data Set 2.9 Addressing Pitch Types 2.10 Cleaning Pitch Locations 2.11 Count of All Observations", " Chapter 2 Extracting, Cleaning, Validating, Transforming 2.1 Extracting Dataset To begin our project, we will import Statcast data spanning from the 2014 MLB season through the 2023 season. This data is hosted on the Baseball Savant website, with each record representing a single pitch and encompassing a rich set of information across 93 fields. The provided code reads in the pitches for each year, amounting to roughly 710,000 pitches per year, which are stored locally. To replicate the subsequent scripts for the entirety of the project, it is imperative to scrape and store each season’s worth of data using the scripts provided in the GitHub folder. Let’s proceed with this essential data retrieval process. rm(list = ls()) mlbraw2014 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2014.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2015 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2015.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2016 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2016.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2017 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2017.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2018 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2018.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2019 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2019.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2020 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2020.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2021 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2021.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2022 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2022.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2023 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2023.csv&quot;,show_col_types=0) %&gt;% suppressMessages() Format the game_date column to ensure all years have the same format. mlbraw &lt;- bind_rows( mlbraw2014, mlbraw2015, mlbraw2016, mlbraw2017, mlbraw2018, mlbraw2019, mlbraw2020, mlbraw2021, mlbraw2022, mlbraw2023 ) mlbraw &lt;- mlbraw %&gt;% mutate(game_date = as.Date(game_date, format=&quot;%m/%d/%y&quot;)) Create a single data frame containing all years and remove individual year data frames. mlbraw &lt;- bind_rows(mlbraw2014, mlbraw2015, mlbraw2016, mlbraw2017, mlbraw2018, mlbraw2019, mlbraw2020, mlbraw2021, mlbraw2022, mlbraw2023) mlbraw &lt;- mlbraw %&gt;% arrange(desc(game_year), desc(game_date), game_pk) rm(mlbraw2014, mlbraw2015, mlbraw2016, mlbraw2017, mlbraw2018, mlbraw2019, mlbraw2020, mlbraw2021, mlbraw2022, mlbraw2023) 2.2 Explain Variables of Interest Now that we have a comprehensive data frame containing all MLB pitches from the past 10 years, we’ll narrow down the variables to those specifically relevant to our project. The selected variables are: game_year: Represents the year in which the game was played. pitch_name: Denotes the name of the pitch type thrown by the pitcher (e.g., Fastball, Curveball). pitch_type: Signifies the abbreviated pitch_name (e.g., FF represents a 4-Seam Fastball). p_throws: Indicates whether the pitcher throws right-handed or left-handed. stand: Specifies whether the batter stands right-handed or left-handed. balls: Represents the number of balls before the pitch of record. strikes: Indicates the number of strikes before the pitch of record. events: Identifies the event that transpired as a result of this pitch (e.g., single, walk, hit by pitch, home run). plate_x: Signifies the horizontal location of the pitch as it crosses the plate, measured in feet away from the center of the plate. plate_z: Represents the vertical location of the pitch as it crosses the plate, measured in feet off the ground. By focusing on these specific variables, we aim to streamline the dataset for further analysis and visualization, aligning with the project’s objectives. 2.3 Create New Variables The refined dataset will feature columns: year, p_type, count, hand, events, plate_x, plate_z, lw. Now I will generate a singular column detailing the outcome of each pitch. The original events column exclusively displays a value when the pitch results in a batter outcome, such as a walk or a single. NA values will signify pitches that do not conclude at-bats, such as balls and strikes. This newly created events column will outline the outcome of every pitch. In addition, I will combine the values in the strikes and balls columns to craft a new count column. This column will signify the batter’s count state for each pitch occurrence. The stand column designates whether the batter hits right-handed or left-handed, while the p_throws column indicates whether the pitcher throws right-handed or left-handed. For the specific objectives of this project, I am focusing on the combination of batter and pitcher handedness, and the new column hand will detail this. mlbraw &lt;- mlbraw %&gt;% mutate( events = if_else(is.na(events) | events == &quot;&quot;, type, events), events = if_else(events == &quot;B&quot;, &quot;ball&quot;, if_else(events == &quot;S&quot;, &quot;strike&quot;, events)), count = paste(balls, strikes, sep = &quot;-&quot;), hand = paste(p_throws, stand, sep = &quot;v&quot;) ) %&gt;% select( game_year, hand, count, pitch_type, pitch_name, events, plate_x, plate_z, delta_run_exp ) A batter’s count is limited to one of 12 possible counts. Therefore, I will filter the data to exclude impossible counts. Additionally, I will eliminate events that are impossible in specific counts. For instance, a batter cannot draw a walk in a 2-2 count. mlbraw &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;, &quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw &lt;- mlbraw %&gt;% filter(!(count == &quot;3-2&quot; &amp; events == &quot;ball&quot;)) %&gt;% filter(!(count == &quot;3-1&quot; &amp; events == &quot;ball&quot;)) %&gt;% filter(!(count == &quot;2-2&quot; &amp; events == &quot;walk&quot;)) %&gt;% filter(!(count == &quot;2-1&quot; &amp; events == &quot;walk&quot;)) Convert the data type of these variables to factors, restricting the possible values and establishing specific orders. mlbraw &lt;- mlbraw %&gt;% mutate(count = factor(count, levels = c(&quot;0-0&quot;, &quot;0-1&quot;, &quot;0-2&quot;, &quot;1-0&quot;, &quot;1-1&quot;, &quot;1-2&quot;, &quot;2-0&quot;, &quot;2-1&quot;, &quot;2-2&quot;, &quot;3-0&quot;, &quot;3-1&quot;, &quot;3-2&quot;)), hand = factor(hand, levels = c(&quot;RvR&quot;, &quot;RvL&quot;, &quot;LvR&quot;, &quot;LvL&quot;)), game_year = factor(game_year, levels = c(&quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;))) Finally, I’ll remove rows with NA values in our columns of interest. mlbraw &lt;- mlbraw %&gt;% filter(complete.cases(across(c(game_year, hand, count, pitch_type, pitch_name, events, plate_x, plate_z, delta_run_exp)))) 2.4 Validating Count, Handedness, Game Year mlbraw %&gt;% count(count) %&gt;% mutate(p = n / sum(n)) %&gt;% ggplot(aes(x = p, y = fct_rev(count))) + geom_col(fill = &quot;steelblue3&quot;) + geom_text(aes(label = paste(100 * round(p, 2), &quot;%&quot;, sep = &quot;&quot;)), hjust = 1.1, size = 4, color = &quot;white&quot;, fontface = &quot;bold&quot;) + ggtitle(&quot;Batter Count distribution \\n&quot;) + theme_minimal() + theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text = element_text(size = 12), axis.text.x = element_blank(), axis.text.y = element_text(hjust = 1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size = 20, hjust = 0.5)) + xlim(0, 0.27) + coord_cartesian(xlim = c(0, 0.27), expand = FALSE) ## Warning in rm(plot1): object &#39;plot1&#39; not found The depicted graph illustrates the distribution of batter counts. From this, I can begin to gauge the extent of available data for constructing a location metric. Notably, 0-0 counts are prevalent, constituting 26% of all pitches, whereas pitches in 3-ball counts are comparatively more rare. plot2 &lt;- mlbraw %&gt;% group_by(hand) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(p= n/ sum(n)) %&gt;% select(-n) ggplot(data=plot2, aes(x=p, y=reorder(hand,p)))+ geom_col(fill=&quot;steelblue3&quot;) + geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.3, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Pitcher and Batter Handedness distribution \\n&quot;) + theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), #axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.43)+ coord_cartesian(xlim = c(0, 0.4), expand = FALSE) plot3 &lt;- mlbraw %&gt;% group_by(game_year) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(p= n/ sum(n)) %&gt;% select(-n) ggplot(data=plot3, aes(x=p, y=game_year))+ geom_col(fill=&quot;steelblue3&quot;) + geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.3, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Pitcher and Batter Handedness distribution \\n&quot;) + theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), #axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.43)+ coord_cartesian(xlim = c(0, 0.15), expand = FALSE) As anticipated, the dataset is fairly evenly divided by game year. Teams typically play 162 regular season games each year, providing approximately 2400 games worth of data annually. The only exception is the 60-game 2020 season, which was shortened due to COVID-19. 2.5 Remove and Transform Event Values The events column might include various game event descriptions unrelated to the pitch being thrown. For instance, if the pitcher picks off the runner leading off first base or if a coach argues and gets ejected from the game, these events will appear as records in the dataset. For the scope of this project, my focus is solely on pitches thrown, particularly competitive pitches where legitimate attempts are made by the batter. While this criterion has a subjective element, I have opted to narrow down the dataset by excluding the following events. mlbraw &lt;- mlbraw %&gt;% filter(!events %in% c(&quot;catcher_interf&quot;, &quot;caught_stealing_2b&quot;, &quot;caught_stealing_3b&quot;, &quot;caught_stealing_home&quot;, &quot;ejection&quot;, &quot;field_error&quot;, &quot;game_advisory&quot;, &quot;intent_walk&quot;, &quot;other_out&quot;, &quot;passed_ball&quot;, &quot;pickoff_1b&quot;, &quot;pickoff_2b&quot;, &quot;pickoff_3b&quot;, &quot;pickoff_caught_stealing_2b&quot;, &quot;pickoff_caught_stealing_3b&quot;, &quot;pickoff_caught_stealing_home&quot;, &quot;pickoff_error_2b&quot;, &quot;pickoff_error_3b&quot;, &quot;pitchout&quot;, &quot;runner_double_play&quot;, &quot;stolen_base_2b&quot;, &quot;stolen_base_3b&quot;, &quot;stolen_base_3b&quot;, &quot;stolen_base_home&quot;)) Wild pitches are currently represented as unique events in the dataset, although in reality, they are simply balls thrown well outside the strike zone. To address this, I have modified the values in the wild_pitch column to either ball or walk, depending on the count in which they were thrown. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(count %in% c(&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events ==&quot;wild_pitch&quot;, &quot;ball&quot;, events)) mlbraw_b &lt;- mlbraw_b %&gt;% mutate(events = if_else(events ==&quot;wild_pitch&quot;, &quot;walk&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) %&gt;% arrange(game_year, count, events) rm(mlbraw_a, mlbraw_b) Likewise, foul balls occurring in two-strike counts should be categorized as foul rather than strike. A strike thrown in a 0-2, 1-2, 2-2, or 3-2 count will result in a strikeout. Therefore, when a batter fouls a ball off in these counts, I will assign the event a new value: foul. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;,&quot;3-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(!(count %in% c(&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;,&quot;3-2&quot;))) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events == &quot;strike&quot;, &quot;foul&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) rm(mlbraw_a, mlbraw_b) mlbraw &lt;- mlbraw %&gt;% mutate(events=if_else(events==&quot;home_run&quot;,&quot;hr&quot;,events)) I will categorize the event values into two groups: non-outs and outs, for future reference. And I’ll verify that these represent the distinct event values contained in the main dataset. non_outs &lt;- c(&quot;ball&quot;,&quot;double&quot;,&quot;hit_by_pitch&quot;,&quot;hr&quot;, &quot;foul&quot;,&quot;single&quot;, &quot;strike&quot;,&quot;triple&quot;,&quot;walk&quot;,&quot;wild_pitch&quot;) outs &lt;- c(&quot;double_play&quot;,&quot;field_out&quot;,&quot;fielders_choice&quot;,&quot;fielders_choice_out&quot;, &quot;force_out&quot;, &quot;grounded_into_double_play&quot;,&quot;fielders_choice_out&quot;, &quot;sac_bunt&quot;,&quot;sac_bunt_double_play&quot;,&quot;sac_fly&quot;,&quot;sac_fly_double_play&quot;, &quot;strikeout&quot;,&quot;strikeout_double_play&quot;,&quot;triple_play&quot;) mlbraw %&gt;% select(events) %&gt;% filter(!(events %in% non_outs)) %&gt;% filter(!(events %in% outs)) # shouldn&#39;t return any records ## # A tibble: 0 × 1 ## # ℹ 1 variable: events &lt;chr&gt; I will uniformly assign the value out to all distinct events that lead to an out, disregarding their specific descriptions. Restricting the possible event values in this manner will be needed in the following steps of this process. mlbraw &lt;- mlbraw %&gt;% mutate(events = if_else(events %in% outs, &quot;out&quot;, events)) Adjust the order of factor levels for the purpose of plotting. mlbraw &lt;- mlbraw %&gt;% mutate(events = factor(events, levels = c(&quot;strike&quot;, &quot;foul&quot;, &quot;ball&quot;, &quot;walk&quot;, &quot;hit_by_pitch&quot;, &quot;out&quot;, &quot;single&quot;, &quot;double&quot;, &quot;triple&quot;, &quot;hr&quot;))) 2.6 Event Outcome Frequency by Count plot4 &lt;- inner_join(mlbraw %&gt;% group_by(count,events) %&gt;% count(), mlbraw %&gt;% group_by(count) %&gt;% count(), join_by(count)) %&gt;% mutate(p = n.x / n.y) %&gt;% select(count, events, p) %&gt;% filter(events != &quot;hit_by_pitch&quot;) ggplot(plot4)+ geom_col(aes(x=events, y=p), fill=&quot;grey&quot;,width=0.9, show.legend = FALSE)+ geom_hline(yintercept=0, linewidth=0.1)+ theme_bw()+ ylim(0, 0.63)+ facet_wrap(~count, ncol=3, nrow=4, scales=&quot;free&quot;)+ ggtitle(&quot;Event Outcome Frequency by Count \\n&quot;)+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), strip.text = element_text(size=20), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, hjust = 1, size=14,color=&quot;grey40&quot;), axis.title = element_blank(), plot.title = element_text(size=20, hjust = 0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) The depicted plot provides a breakdown of event frequencies in various batter counts, particularly when the events have been condensed to 10 values. Notably, a pitcher is significantly more inclined to throw a strike in a 3-0 count than in a 0-0 or 0-2 count. Additionally, there is a increased likelihood of recording an out in two-strike counts compared to no-strike or one-strike counts. A cursory examination of the plot suggests that the outcomes align with my expectations, thereby validating the contents of the dataset. 2.7 Average Delta Run Expectancy The objective of this project is to quantify the effectiveness of pitch locations, taking into account various factors such as pitch type, count, the handedness of the pitcher and batter, along with the spatial coordinates of the pitch on the x and y plane. However, determining the appropriate metric to quantify and interpret the resulting pitch outcome is a critical consideration. Within the dataset, there exists a column named delta_run_exp, which denotes the value of each individual event in terms of how the run expectancy changes based on that specific event. Run expectancy is determined for every fixed situation in a game, considering factors such as the location of base runners, the number of outs, and the batter count before the pitch. Consider the following scenario as an example: an at-bat starts with 0 outs and runners on 1st and 2nd in a 0-0 count. In this specific state, there is an expected number of runs to be scored for the remainder of the inning. For instance, in 2023, an average of 1.465 runs were scored in the remainder of the inning for this particular scenario. If the first pitch in this at-bat is a strike, a new scenario unfolds with a different expected runs scored for the remainder of the inning—now with 0 outs, runners on 1st and 2nd, and a 0-1 count. The average runs scored for the remainder of the inning in this new scenario will be slightly different, for example, 1.376. Consequently, the strike thrown by the pitcher has changed the expected runs scored by -0.089, which is reflected in the delta_run_exp column. The fundamental idea is to evaluate every pitch by comparing the expected runs scored that inning before and after the pitch is thrown. While delta_run_exp seems to be a suitable measure for my location quality metric, it has a drawback. It derives its value from factors like count, outs, base runners, and the resulting event. In this project, the aim is to assess pitches under different conditions, focusing on the average change in run expectancy based on the count and event. Thus, the goal is to transform the existing dataset so that instead of relying on delta_run_exp as the metric of success or failure, a new variable is created to represent the change in run expectancy based on the specified project parameters. This way, when a specific event occurs (e.g., ball, strike, double, fielder’s choice) in a specific count (e.g., 0-1, 2-0, 3-2), we can observe the average change in run expectancy. re_outs &lt;- mlbraw %&gt;% filter(events == &quot;out&quot;) %&gt;% group_by(count, events) %&gt;% summarise(re = round(mean(delta_run_exp, na.rm = TRUE), 4), .groups = &#39;drop&#39;) re_non_outs &lt;- mlbraw %&gt;% filter(events %in% non_outs) %&gt;% group_by(count, events) %&gt;% summarise(re = round(mean(delta_run_exp, na.rm = TRUE), 4), .groups = &#39;drop&#39;) re_lookup &lt;- bind_rows(re_outs, re_non_outs) %&gt;% arrange(count, events) rm(outs, non_outs, re_outs, re_non_outs) Consider each event that leads to an out as a single out event, irrespective of the specific type of out or the number of outs resulting from the play. This approach aims to mitigate the influence of base runners on the changing run expectancy, as well as the impact of the number of outs. I have separated outs from non-outs and performed an aggregation to determine the average change in run expectancy for every conceivable event in each possible count. anti_join(mlbraw %&gt;% distinct(count, events), re_lookup %&gt;% distinct(count, events), join_by(count, events)) ## # A tibble: 0 × 2 ## # ℹ 2 variables: count &lt;fct&gt;, events &lt;fct&gt; Using the refined mlbraw dataset and the new run expectancy lookup table, we verify whether any combination of counts and events from the two datasets are incompatible. Specifically, we check if there is no combination of count and events existing in one table that is not present in the other. Additionally, for pitches resulting in a hit by pitch, I have opted to treat the event as if it were a ball. Consequently, I calculate the change in run expectancy from the perspective of ball rather than hit_by_pitch. This choice aims to enhance the continuity between location plots, ensuring that rare hit_by_pitch events do not disproportionately influence specific locations and disrupt the overall analysis. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(count %in% c(&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events == &quot;hit_by_pitch&quot;, &quot;ball&quot;, events)) mlbraw_b &lt;- mlbraw_b %&gt;% mutate(events = if_else(events == &quot;hit_by_pitch&quot;, &quot;walk&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) %&gt;% arrange(game_year, count, events) rm(mlbraw_a, mlbraw_b) 2.8 Join Lookup Table to Data Set Next, I will merge the primary dataset containing the pitches from the past 10 years with the lookup table, effectively substituting the existing delta_run_exp values with the newly calculated average change in run expectancy values. mlbraw &lt;- mlbraw %&gt;% left_join(re_lookup, join_by(count, events)) %&gt;% select(-delta_run_exp) Now, we have a comprehensive overview of how each event in each count influences run expectancy. For every combination of count and events, we have specific change in run expectancy value. plot5 &lt;- re_lookup %&gt;% filter(!events %in% c(&quot;hit_by_pitch&quot;)) %&gt;% mutate(events = factor(events, levels = c(&quot;out&quot;, &quot;strike&quot;, &quot;foul&quot;, &quot;ball&quot;, &quot;walk&quot;, &quot;single&quot;, &quot;double&quot;, &quot;triple&quot;, &quot;hr&quot;))) ggplot(data = plot5, aes(x=count, y=events, fill=re))+ geom_tile(color = &quot;black&quot;, show.legend = FALSE)+ geom_text(aes(x=count, y=events, label=round(re,2)), color = &quot;black&quot;, size = 4)+ ggtitle(&quot;Average Change in Run Expenctancy Based on Count and Events \\n&quot;)+ scale_fill_gradient2(high=&quot;red&quot;, mid=&quot;white&quot;, low=&quot;blue&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5))+ coord_fixed() As expected, the outcomes of events yield slightly different changes in run expectancy depending on the count. For instance, a home run hit in an 0-2 count adds more run value than a home run hit in a 3-0 count. This discrepancy arises because an 0-2 count is inherently more advantageous for the pitcher compared to a 3-0 count, given the lower starting run expectancy before the home run is hit. Likewise, recording an out in a 3-0 count favors the pitcher compared to recording an out in a 0-2 count, aligning with common baseball understanding. Fortunately, when examining average change in run expectancy values by count, no drastic differences are observed between the groupings. Moreover, all the values align coherently with baseball intuition. 2.9 Addressing Pitch Types Up to this point in the cleaning process, we have not addressed the pitch_type column. Let’s take a closer look at the distribution of pitch types in a dataset encompassing all pitches thrown over the last 10 years in all MLB regular season games. plot6 &lt;- mlbraw %&gt;% group_by(pitch_type, pitch_name) %&gt;% count() %&gt;% arrange(desc(n)) ggplot(plot6, aes(x=n, y=reorder(pitch_name, n)))+ geom_col(fill=&quot;steelblue3&quot;)+ geom_text(aes(label = n), hjust = -0.1, size=4)+ ggtitle(&quot;Count of Observations by Pitch Type \\n&quot;)+ theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.text.y = element_text(hjust=1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,2500000)+ coord_cartesian(expand = FALSE) 4-Seam Fastballs constitute a significant portion of the dataset. Sinkers, Sliders, Changeups, Curveballs, and cutters are well-represented, but there is a notable drop in observations for the remaining pitch types. For now, we need to transform some of the pitch types. Certain pitch type values, such as Knuckle Curves, Slow Curves, and Slurves, are variations of Curveballs. While these variations possess distinct qualities and hand grips, they are considered minor in comparison to the standard Curveball. Therefore, I’ll transform these Curveball variations to take on the standard Curveball pitch type value. Some pitch types are exceptionally rare compared to the six or so most commonly thrown pitches. For the purpose of this project, these infrequent pitch types can be eliminated. This includes Screwballs, Forkballs, Eephus pitches, among others. Pitch Outs are not considered competitive pitches and will be removed from the dataset. Sweepers, a relatively new pitch type gaining popularity, are similar to sliders in movement but tend to have more horizontal break and less vertical break, along with lower velocity. While there is ongoing debate about whether sweepers should be considered a distinct pitch type or a variation of the slider, for the purposes of this project, and due to the limited observations, I will transform sweepers into sliders. mlbraw &lt;- mlbraw %&gt;% filter(pitch_type %in% c(&quot;FF&quot;,&quot;CU&quot;,&quot;SL&quot;,&quot;SI&quot;,&quot;CH&quot;,&quot;FS&quot;, &quot;FC&quot;,&quot;KC&quot;,&quot;ST&quot;,&quot;CS&quot;,&quot;SV&quot;)) mlbraw &lt;- mlbraw %&gt;% mutate(pitch_type = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;, &quot;SV&quot;), &quot;CU&quot;, if_else(pitch_type %in% c(&quot;CH&quot;,&quot;FS&quot;), &quot;CH&quot;, if_else(pitch_type %in% c(&quot;SL&quot;,&quot;ST&quot;), &quot;SL&quot;, pitch_type)))) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;CU&quot;, &quot;Curveball&quot;, pitch_name)) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;SL&quot;, &quot;Slider&quot;, pitch_name)) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;CH&quot;, &quot;Changeup&quot;, pitch_name)) plot7 &lt;- mlbraw %&gt;% group_by(pitch_name) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(s=sum(n)) %&gt;% mutate(p = n/s) ggplot(plot7, aes(x=p, y=reorder(pitch_name, p), label=p))+ geom_col(fill=&quot;steelblue3&quot;)+ geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.1, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Updated Count of Observations by Pitch Type \\n&quot;)+ theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.text.y = element_text(hjust=1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.38)+ coord_cartesian(expand = FALSE) This narrows down the pitch types to six for constructing the location quality metric. Notably, 4-Seam Fastballs are more abundantly represented compared to the other pitch types. It will be interesting to observe how this imbalance might influence the results in the subsequent steps. mlbraw &lt;- mlbraw %&gt;% mutate(pitch_type = factor(pitch_type, levels = c(&quot;FF&quot;, &quot;SI&quot;, &quot;FC&quot;, &quot;CH&quot;, &quot;CU&quot;, &quot;SL&quot;))) plot8 &lt;- inner_join(mlbraw %&gt;% group_by(pitch_type,events) %&gt;%count(), mlbraw %&gt;% group_by(pitch_type) %&gt;% count(), join_by(pitch_type)) %&gt;% mutate(p = n.x / n.y) %&gt;% select(pitch_type, events, p) plot8 &lt;- plot8 %&gt;% mutate( pitch_type = factor(pitch_type, levels = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)), events = factor(events, levels = c(&quot;strike&quot;,&quot;foul&quot;,&quot;ball&quot;,&quot;walk&quot;,&quot;hit_by_pitch&quot;, &quot;out&quot;,&quot;single&quot;,&quot;double&quot;,&quot;triple&quot;,&quot;hr&quot;))) ggplot(plot8)+ geom_col(aes(x=events, y=p), fill=&quot;grey&quot;)+ ggtitle(&quot;Event Outcome Frequency by Pitch Type \\n&quot;)+ ylim(0, 0.4)+ theme_bw()+ facet_wrap(~pitch_type, ncol=3, nrow=3, scales=&quot;free&quot;)+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), strip.text = element_text(size=20), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, hjust = 1, size=14,color=&quot;grey40&quot;), axis.title = element_blank(), plot.title = element_text(size=20, hjust = 0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) As illustrated in the graph, the frequency of event outcomes appears to be relatively consistent across different pitch types. Notably, pitch types such as curveballs, sliders, and changeups, characterized by increased movement and aggressive hand grips, are more frequently thrown for balls than strikes. Conversely, variations of fastballs tend to be thrown for strikes more often. This observation aligns with the inherent characteristics and strategic use of these pitch types in baseball. 2.10 Cleaning Pitch Locations Now, let’s delve into the spatial aspect of each pitch, focusing on the plate_x variable. The plate_x value is determined by the horizontal distance of the pitch from the center of the plate, measured in feet. When a pitch is directed down the middle of the plate, its plate_x value is 0. Given that home plate is 1.66 feet wide, pitches with plate_x values ranging from -0.83 to 0.83 cross some part of the plate. To provide a clearer picture, let’s examine the distribution of plate_x values, rounded to the nearest whole number. This distribution offers insights into how pitches are distributed across the width of the plate and provides a foundation for evaluating the horizontal location of each pitch. mlbraw %&gt;% mutate(plate_x = round(plate_x, 0)) %&gt;% group_by(plate_x) %&gt;% count() %&gt;% arrange(desc(plate_x)) %&gt;% kable(&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;), full_width = FALSE) plate_x n 9 2 8 1 7 2 6 6 5 35 4 492 3 12492 2 253459 1 1631079 0 2883140 -1 1556976 -2 241665 -3 11448 -4 493 -5 45 -6 9 -7 4 -8 2 -9 2 -10 1 -11 1 The distribution of plate_x values exhibits a normal pattern with an exceptionally high peak at 0. Pitches thrown more than 4 inches to the right or left of the center of the strike zone are extremely rare. Considering the possibility of data entry errors accounting for such extreme values, I have opted to refine the dataset to include only pitches with plate_x values between -4 and 4. This adjustment aims to ensure the reliability and accuracy of the spatial data, focusing on a more plausible range of horizontal locations within the strike zone. mlbraw &lt;- mlbraw %&gt;% filter(plate_x &gt;= -4, plate_x &lt;= 4) Examining plate_z, we observe a comparable distribution of pitch locations in the dataset. The majority of pitches are delivered approximately 2 to 3 feet above the ground, representing the central region of the vertical strike zone. Pitches exceeding 6 feet above the ground are infrequent, as are pitches dipping 2 feet below the ground (suggestive of bouncing before reaching the plate). To enhance the dataset’s accuracy and relevance, I intend to establish these heights as cutoffs and filter out pitches falling outside this specified range. This adjustment aims to focus on a realistic and meaningful span of vertical pitch locations within the strike zone. mlbraw %&gt;% mutate(plate_z = round(plate_z, 0)) %&gt;% group_by(plate_z) %&gt;% count() %&gt;% arrange(desc(plate_z)) %&gt;% kable(&quot;html&quot;) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;), full_width = FALSE) plate_z n 12 1 11 2 10 2 9 8 8 21 7 260 6 4339 5 61776 4 542856 3 2002216 2 2648279 1 1102790 0 204405 -1 21991 -2 1925 -3 169 -4 19 -5 3 mlbraw &lt;- mlbraw %&gt;% filter(plate_z &gt;= -2, plate_z &lt;= 6) 2.11 Count of All Observations Moving forward, a significant challenge lies in assessing the efficacy of a pitch’s location when certain combinations of pitch type, count, and handedness are rare in the dataset. For instance, situations like 4-Seam Fastballs delivered by a right-handed pitcher to a right-handed batter in a 0-0 count are overwhelmingly predominant, comprising 240,591 observations. Conversely, scenarios such as Curveballs thrown by a left-handed pitcher to a left-handed batter in 3-0 counts are exceptionally rare, accounting for only 21 observations. The concern is how to effectively gauge pitch location quality with such limited data points as the latter scenario may not sufficiently map out the nuances of location effectiveness. mlbraw &lt;- mlbraw %&gt;% rename(x=plate_x, y=plate_z) %&gt;% select(hand, pitch_type, count, events, x, y, re) plot9 &lt;- mlbraw %&gt;% group_by(hand, count, pitch_type) %&gt;% count() %&gt;% ungroup() ggplot(data = plot9, aes(x=pitch_type, y=count))+ geom_tile(aes(fill=n), alpha = 0.5,show.legend = FALSE)+ facet_wrap(~hand, scale=&quot;free&quot;)+ geom_text(aes(x=pitch_type, y=count, label=n))+ scale_fill_gradientn(colours = c(&quot;blue&quot;,&quot;white&quot;,&quot;red&quot;), values = scales::rescale(c(min(plot9$n), quantile(plot9$n, 0.1), max(plot9$n))), guide=&quot;colorbar&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5)) To address this challenge, I’ve opted for a workaround that effectively doubles the dataset. All pitches thrown by right-handed pitchers to right-handed batters will be mirrored by pitches thrown by left-handed pitchers to left-handed batters, with the hand label changed from LvL to RvR. The additional data will possess mirrored plate_x values. For instance, a pitch thrown by a left-handed pitcher to a left-handed batter with a plate_x of 1 and plate_z of 4 will be augmented as a pitch thrown by a right-handed pitcher to a right-handed batter with a plate_x of -1 and plate_z of 4. This augmentation results in a dataset with twice the number of observations, providing a more balanced representation across various pitch type, count, and handedness combinations. mlbraw_r_r &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;RvR&quot;), mlbraw %&gt;% filter(hand == &quot;LvL&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;RvR&quot;)) mlbraw_l_l &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;LvL&quot;), mlbraw %&gt;% filter(hand == &quot;RvR&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;LvL&quot;)) mlbraw_r_l &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;RvL&quot;), mlbraw %&gt;% filter(hand == &quot;LvR&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;RvL&quot;)) mlbraw_l_r &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;LvR&quot;), mlbraw %&gt;% filter(hand == &quot;RvL&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;LvR&quot;)) mlbraw2 &lt;- bind_rows(mlbraw_r_r, mlbraw_l_l, mlbraw_r_l, mlbraw_l_r) rm(mlbraw_r_r, mlbraw_l_l, mlbraw_r_l, mlbraw_l_r, mlbraw) The updated heatmap now displays twice the number of observations for each combination of handedness, pitch type, and count. Although certain combinations still exhibit a relatively low number of observations, the augmentation has notably improved the dataset’s representation across various scenarios, offering a more balanced distribution. plot10 &lt;- mlbraw2 %&gt;% group_by(hand, count, pitch_type) %&gt;% count() %&gt;% ungroup() ggplot(data = plot10, aes(x=pitch_type, y=count))+ geom_tile(aes(fill=n), alpha = 0.5,show.legend = FALSE)+ facet_wrap(~hand, scale=&quot;free&quot;)+ geom_text(aes(x=pitch_type, y=count, label=n))+ scale_fill_gradientn(colours = c(&quot;blue&quot;,&quot;white&quot;,&quot;red&quot;), values = scales::rescale(c(min(plot10$n), quantile(plot10$n, 0.1), max(plot10$n))), guide=&quot;colorbar&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5)) "],["example-model.html", "Chapter 3 Example Model 3.1 Scatterplot of Example Data 3.2 Scatterplot of Example Data Filtered 3.3 Create Grid 3.4 Apply Game Results to Grid", " Chapter 3 Example Model 3.1 Scatterplot of Example Data The depicted plot focuses specifically on sliders thrown by right-handed pitchers (RHP) to right-handed batters (RHB) in 2-2 counts. The red rectangle serves as a visual representation of the strike zone for reference. This targeted visualization allows for a detailed examination of the location and distribution of recorded sliders within this particular scenario. count_df &lt;- mlbraw2 %&gt;% filter(count == &quot;2-2&quot;) hand_pitch_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, pitch_type == &quot;SL&quot;) hand_pitch_count_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, pitch_type == &quot;SL&quot;, count == &quot;2-2&quot;) hand_count_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, count == &quot;2-2&quot;) n &lt;- hand_pitch_count_df %&gt;% count() %&gt;% as_vector() if (n &gt; 10000) { hand_pitch_count_df &lt;- hand_pitch_count_df %&gt;% slice_sample(n=10000) } else { hand_pitch_count_df } rm(n) ggplot() + geom_point(data = hand_pitch_count_df, aes(x,y), size = 0.1, alpha=0.2, show.legend = TRUE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ xlim(-4,5)+ ylim(-3,6.5)+ coord_fixed() This plot encompasses all 50,909 recorded sliders thrown by right-handed pitchers (RHP) to right-handed batters (RHB) in 2-2 counts from 2014-2023. The red rectangle serves as a representation of the strike zone for reference. The objective is to utilize these location data points, along with the associated run expectancy change for each event outcome, to discern the optimal and suboptimal pitch locations for sliders thrown under these specific conditions. An apparent challenge arises as these pitches tend to cluster in particular regions. An oval shape emerges, primarily centered in the bottom right corner of the strike zone, expanding outward with diminishing observations. In certain areas, the frequency of observations is so sparse that attempting to model a smooth curve proves challenging. To address this, we can refine our focus to regions with a higher concentration of observations, excluding regions with fewer pitches to avoid potential distortions from outlier pitch locations. 3.2 Scatterplot of Example Data Filtered Here is a rendition of the same plot, with the exclusion of the top 1% of outlier points. This adjustment allows us to concentrate on regions with a more substantial density of observations, providing a clearer representation of the distribution of slider pitches thrown by right-handed pitchers to right-handed batters in 2-2 counts. The red rectangle remains indicative of the strike zone for reference. g &lt;- expand.grid(x = seq(-4, 4, 0.01), y = seq(-2, 6, 0.01)) %&gt;% mutate(x=round(x,2), y=round(y,2)) %&gt;% as_tibble() gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) gfa &lt;- gf %&gt;% augment() gfa99 &lt;- gfa %&gt;% filter(.hat &lt;= quantile(gfa$.hat, 0.99)) %&gt;% select(x, y) hand_pitch_count_df_lim &lt;- hand_pitch_count_df %&gt;% semi_join(gfa99, join_by(x,y)) ggplot() + geom_point(data = hand_pitch_count_df_lim, aes(x,y), size = 0.1, alpha=0.2, show.legend =TRUE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ xlim(-4,5)+ ylim(-3,6.5)+ coord_fixed() 3.3 Create Grid Based on the location of these slider pitches, excluding the top 1% of outlier points, a grid region has been established. This grid delineates the area where 99% of all sliders thrown by right-handed pitchers to right-handed batters are concentrated. This grid provides a focused representation of the typical location distribution for these pitches in 2-2 counts. aa &lt;- gfa99 %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() aa &lt;- gg %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() ggplot() + geom_point(data = gg, aes(x = x, y = y), color=&quot;black&quot;, alpha=0.1, size = 0.000001, show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() 3.4 Apply Game Results to Grid Next, the GAM (Generalized Additive Model) function has been employed to estimate the change in run expectancy based on pitch location for the specified pitch parameters. The resulting plot illustrates a smooth representation of optimal and sub-optimal pitch locations, with optimal locations depicted in bright yellow and less effective locations in dark blue. Observing the plot, pitches around the edges of the strike zone, particularly the low and outside corner, are rated highest. This aligns with the common perception that a slider moving away from the hitter in this location is generally considered effective. Conversely, pitches located further away from the edge of the strike zone tend to be less effective, as they become easier for hitters to recognize and take. It’s worth noting that the output average run expectancy values have undergone a transformation. The range of these values varies significantly depending on the count in which a pitch is thrown. To effectively evaluate the quality of a pitch location and maintain a consistent scale irrespective of the count, the output values have been normalized to a range from 0 to 1. This normalization ensures a standardized assessment of pitch location quality across different count scenarios. gf1 &lt;- gam(re ~ s(x, y), data = hand_pitch_count_df, method = &quot;REML&quot;) gg$lp &lt;- predict(gf1, gg, type = &quot;response&quot;) gg &lt;- gg %&gt;% mutate(pq = (lp - min(lp)) / (max(lp) - min(lp))) ggplot() + geom_tile(data = gg, aes(x = x, y = y, fill = pq), show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.50, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + scale_fill_viridis_c(direction = -1, limits = c(0,1)) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() rm(re_lookup,count_df, hand_count_df, hand_pitch_count_df, hand_pitch_count_df_lim, hand_pitch_df, aa, bb, cc, dd, ee, ff, g, gf, gf1, gfa, gfa99, gg) "],["functions.html", "Chapter 4 Functions 4.1 Function 1 4.2 Function 2 4.3 Function 3", " Chapter 4 Functions These functions essentially replicate the previous steps demonstrated in the example model. However, they enable us to iteratively perform the process for all combinations of handedness, pitch type, and count. By inputting specific parameters into these functions, we can generate a resulting data frame and plot for each unique combination of handedness, count, and pitch type. This systematic approach allows for a comprehensive examination of pitch location effectiveness across a wide range of scenarios in the dataset. 4.1 Function 1 function_p_type_hand_ptiles &lt;- function(df, hand, pitch_type) { hand = enquo(hand) pitch_type = enquo(pitch_type) hand_pitch_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type) gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) } 4.2 Function 2 location_quality &lt;- function(df, hand, pitch_type, count, gf) { hand = enquo(hand) pitch_type = enquo(pitch_type) count = enquo(count) count_df &lt;- df %&gt;% filter(UQ(count) == count) hand_pitch_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type) hand_pitch_count_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type, UQ(count) == count) hand_count_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(count) == count) n &lt;- hand_pitch_count_df %&gt;% count() %&gt;% pull() if (n &gt; 10000) { hand_pitch_count_df &lt;- hand_pitch_count_df %&gt;% slice_sample(n = 10000) } g &lt;- expand.grid(x = seq(-4, 4, 0.01), y = seq(-2, 6, 0.01)) %&gt;% mutate(x=round(x,2), y=round(y,2)) %&gt;% as_tibble() #gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) gfa &lt;- gf %&gt;% augment() gfa99 &lt;- gfa %&gt;% filter(.hat &lt;= quantile(gfa$.hat, 0.99)) %&gt;% select(x, y) aa &lt;- gfa99 %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() aa &lt;- gg %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() gf1 &lt;- gam(re ~ s(x, y), data = hand_pitch_count_df, method = &quot;REML&quot;) gg$lp &lt;- predict(gf1, gg, type = &quot;response&quot;) gg &lt;- gg %&gt;% mutate(hand = unique(hand_pitch_count_df$hand), pitch_type = unique(hand_pitch_count_df$pitch_type), count = unique(hand_pitch_count_df$count)) %&gt;% select(hand, pitch_type, count, x, y, lp) gg &lt;- gg %&gt;% mutate(pq = (lp - min(lp)) / (max(lp) - min(lp))) %&gt;% select(-lp) %&gt;% mutate(pq = 1-pq) return(gg) } 4.3 Function 3 location_quality_plot &lt;- function(df) { hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) df &lt;- df %&gt;% inner_join(hand, join_by(hand==hand_id)) %&gt;% select(-hand) %&gt;% rename(hand=hand.y) %&gt;% inner_join(pitch_type, join_by(pitch_type==pitch_type_id)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type.y) %&gt;% inner_join(count, join_by(count==count_id)) %&gt;% select(-count) %&gt;% rename(count=count.y) rm(hand, pitch_type, count) df &lt;- df %&gt;% mutate(label = paste(hand, pitch_type, count, sep = &quot; &quot;)) ggplot() + geom_tile(data= df, aes(x,y, fill = pq), show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.1, colour = &quot;red&quot;) + ggtitle(unique(df$label)) + theme_bw() + scale_fill_viridis_c(direction = 1, limits = c(0,1)) + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 12), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() } "],["applying-functions.html", "Chapter 5 Applying Functions 5.1 Create Data Frames 5.2 Create Plots", " Chapter 5 Applying Functions There are 288 unique combinations of handedness, pitch type, and count. Each combination will have its own GAM smooth. To expedite the processing time, I’ll convert the categorical values of the mlbraw2 data frame to integers using indexed values. After the computations are complete, I’ll revert the integer values back to the original categorical values. The outcome of this extensive computation will be 288 data frames, each encompassing every possible combination of x and y values from its respective grid plot. For instance, the grid region representing 99% of all sliders thrown by RHP to RHB will include every conceivable combination of x and y values, along with the corresponding change in run expectancy as visualized before. All 288 data frames will be consolidated into a single data frame to be utilized for joining with a season’s worth of data. This unified dataset will serve as the foundation for further analysis and insights. 5.1 Create Data Frames hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) events &lt;- tibble(events_id = c(1,2,3,4,5,6,7,8,9) , events = c(&quot;ball&quot;,&quot;double&quot;,&quot;hr&quot;,&quot;out&quot;,&quot;single&quot;,&quot;strike&quot;,&quot;triple&quot;,&quot;foul&quot;,&quot;walk&quot;)) mlbraw2 &lt;- mlbraw2 %&gt;% inner_join(hand, join_by(hand)) %&gt;% select(-hand) %&gt;% rename(hand=hand_id) %&gt;% inner_join(pitch_type, join_by(pitch_type)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type_id) %&gt;% inner_join(count, join_by(count)) %&gt;% select(-count) %&gt;% rename(count=count_id) %&gt;% inner_join(events, join_by(events)) %&gt;% select(-events) %&gt;% rename(events=events_id) mlbraw2$hand &lt;- as.integer(as.factor(mlbraw2$hand)) mlbraw2$pitch_type &lt;- as.integer(as.factor(mlbraw2$pitch_type)) mlbraw2$count &lt;- as.integer(as.factor(mlbraw2$count)) mlbraw2$events &lt;- as.integer(as.factor(mlbraw2$events)) rm(hand, pitch_type, count, events) gf_r_r_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 1) # &quot;RvR&quot;, &quot;SI&quot; gf_r_r_si &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 2) # &quot;RvR&quot;, &quot;SI&quot; gf_r_r_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 3) # &quot;RvR&quot;, &quot;FC&quot; gf_r_r_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 4) # &quot;RvR&quot;, &quot;CH&quot; gf_r_r_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 5) # &quot;RvR&quot;, &quot;CU&quot; gf_r_r_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 6) # &quot;RvR&quot;, &quot;SL&quot; gf_r_l_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 1) # &quot;RvL&quot;, &quot;FF&quot; gf_r_l_si &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 2) # &quot;RvL&quot;, &quot;SI&quot; gf_r_l_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 3) # &quot;RvL&quot;, &quot;FC&quot; gf_r_l_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 4) # &quot;RvL&quot;, &quot;CH&quot; gf_r_l_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 5) # &quot;RvL&quot;, &quot;CU&quot; gf_r_l_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 6) # &quot;RvL&quot;, &quot;SL&quot; gf_l_l_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 1) # &quot;LvL&quot;, &quot;FF&quot; gf_l_l_si &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 2) # &quot;LvL&quot;, &quot;SI&quot; gf_l_l_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 3) # &quot;LvL&quot;, &quot;FC&quot; gf_l_l_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 4) # &quot;LvL&quot;, &quot;CH&quot; gf_l_l_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 5) # &quot;LvL&quot;, &quot;CU&quot; gf_l_l_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 6) # &quot;LvL&quot;, &quot;SL&quot; gf_l_r_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 1) # &quot;LvR&quot;, &quot;FF&quot;) gf_l_r_si &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 2) # &quot;LvR&quot;, &quot;SI&quot;) gf_l_r_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 3) # &quot;LvR&quot;, &quot;FC&quot;) gf_l_r_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 4) # &quot;LvR&quot;, &quot;CH&quot;) gf_l_r_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 5) # &quot;LvR&quot;, &quot;CU&quot;) gf_l_r_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 6) # &quot;LvR&quot;, &quot;SL&quot;) r_r_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 1, gf = gf_r_r_ff) r_r_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 2, gf = gf_r_r_ff) r_r_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 3, gf = gf_r_r_ff) r_r_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 4, gf = gf_r_r_ff) r_r_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 5, gf = gf_r_r_ff) r_r_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 6, gf = gf_r_r_ff) r_r_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 7, gf = gf_r_r_ff) r_r_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 8, gf = gf_r_r_ff) r_r_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 9, gf = gf_r_r_ff) r_r_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 10, gf = gf_r_r_ff) r_r_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 11, gf = gf_r_r_ff) r_r_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 12, gf = gf_r_r_ff) r_r_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 1, gf = gf_r_r_si) r_r_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 2, gf = gf_r_r_si) r_r_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 3, gf = gf_r_r_si) r_r_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 4, gf = gf_r_r_si) r_r_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 5, gf = gf_r_r_si) r_r_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 6, gf = gf_r_r_si) r_r_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 7, gf = gf_r_r_si) r_r_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 8, gf = gf_r_r_si) r_r_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 9, gf = gf_r_r_si) r_r_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 10, gf = gf_r_r_si) r_r_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 11, gf = gf_r_r_si) r_r_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 12, gf = gf_r_r_si) r_r_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 1, gf = gf_r_r_fc) r_r_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 2, gf = gf_r_r_fc) r_r_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 3, gf = gf_r_r_fc) r_r_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 4, gf = gf_r_r_fc) r_r_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 5, gf = gf_r_r_fc) r_r_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 6, gf = gf_r_r_fc) r_r_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 7, gf = gf_r_r_fc) r_r_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 8, gf = gf_r_r_fc) r_r_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 9, gf = gf_r_r_fc) r_r_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 10, gf = gf_r_r_fc) r_r_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 11, gf = gf_r_r_fc) r_r_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 12, gf = gf_r_r_fc) r_r_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 1, gf = gf_r_r_ch) r_r_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 2, gf = gf_r_r_ch) r_r_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 3, gf = gf_r_r_ch) r_r_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 4, gf = gf_r_r_ch) r_r_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 5, gf = gf_r_r_ch) r_r_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 6, gf = gf_r_r_ch) r_r_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 7, gf = gf_r_r_ch) r_r_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 8, gf = gf_r_r_ch) r_r_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 9, gf = gf_r_r_ch) r_r_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 10, gf = gf_r_r_ch) r_r_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 11, gf = gf_r_r_ch) r_r_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 12, gf = gf_r_r_ch) r_r_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 1, gf = gf_r_r_sl) r_r_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 2, gf = gf_r_r_sl) r_r_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 3, gf = gf_r_r_sl) r_r_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 4, gf = gf_r_r_sl) r_r_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 5, gf = gf_r_r_sl) r_r_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 6, gf = gf_r_r_sl) r_r_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 7, gf = gf_r_r_sl) r_r_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 8, gf = gf_r_r_sl) r_r_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 9, gf = gf_r_r_sl) r_r_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 10, gf = gf_r_r_sl) r_r_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 11, gf = gf_r_r_sl) r_r_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 12, gf = gf_r_r_sl) r_r_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 1, gf = gf_r_r_cu) r_r_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 2, gf = gf_r_r_cu) r_r_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 3, gf = gf_r_r_cu) r_r_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 4, gf = gf_r_r_cu) r_r_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 5, gf = gf_r_r_cu) r_r_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 6, gf = gf_r_r_cu) r_r_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 7, gf = gf_r_r_cu) r_r_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 8, gf = gf_r_r_cu) r_r_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 9, gf = gf_r_r_cu) r_r_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 10, gf = gf_r_r_cu) r_r_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 11, gf = gf_r_r_cu) r_r_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 12, gf = gf_r_r_cu) r_l_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 1, gf = gf_r_l_ff) r_l_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 2, gf = gf_r_l_ff) r_l_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 3, gf = gf_r_l_ff) r_l_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 4, gf = gf_r_l_ff) r_l_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 5, gf = gf_r_l_ff) r_l_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 6, gf = gf_r_l_ff) r_l_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 7, gf = gf_r_l_ff) r_l_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 8, gf = gf_r_l_ff) r_l_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 9, gf = gf_r_l_ff) r_l_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 10, gf = gf_r_l_ff) r_l_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 11, gf = gf_r_l_ff) r_l_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 12, gf = gf_r_l_ff) r_l_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 1, gf = gf_r_l_si) r_l_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 2, gf = gf_r_l_si) r_l_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 3, gf = gf_r_l_si) r_l_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 4, gf = gf_r_l_si) r_l_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 5, gf = gf_r_l_si) r_l_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 6, gf = gf_r_l_si) r_l_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 7, gf = gf_r_l_si) r_l_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 8, gf = gf_r_l_si) r_l_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 9, gf = gf_r_l_si) r_l_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 10, gf = gf_r_l_si) r_l_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 11, gf = gf_r_l_si) r_l_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 12, gf = gf_r_l_si) r_l_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 1, gf = gf_r_l_fc) r_l_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 2, gf = gf_r_l_fc) r_l_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 3, gf = gf_r_l_fc) r_l_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 4, gf = gf_r_l_fc) r_l_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 5, gf = gf_r_l_fc) r_l_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 6, gf = gf_r_l_fc) r_l_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 7, gf = gf_r_l_fc) r_l_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 8, gf = gf_r_l_fc) r_l_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 9, gf = gf_r_l_fc) r_l_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 10, gf = gf_r_l_fc) r_l_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 11, gf = gf_r_l_fc) r_l_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 12, gf = gf_r_l_fc) r_l_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 1, gf = gf_r_l_ch) r_l_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 2, gf = gf_r_l_ch) r_l_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 3, gf = gf_r_l_ch) r_l_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 4, gf = gf_r_l_ch) r_l_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 5, gf = gf_r_l_ch) r_l_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 6, gf = gf_r_l_ch) r_l_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 7, gf = gf_r_l_ch) r_l_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 8, gf = gf_r_l_ch) r_l_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 9, gf = gf_r_l_ch) r_l_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 10, gf = gf_r_l_ch) r_l_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 11, gf = gf_r_l_ch) r_l_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 12, gf = gf_r_l_ch) r_l_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 1, gf = gf_r_l_sl) r_l_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 2, gf = gf_r_l_sl) r_l_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 3, gf = gf_r_l_sl) r_l_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 4, gf = gf_r_l_sl) r_l_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 5, gf = gf_r_l_sl) r_l_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 6, gf = gf_r_l_sl) r_l_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 7, gf = gf_r_l_sl) r_l_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 8, gf = gf_r_l_sl) r_l_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 9, gf = gf_r_l_sl) r_l_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 10, gf = gf_r_l_sl) r_l_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 11, gf = gf_r_l_sl) r_l_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 12, gf = gf_r_l_sl) r_l_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 1, gf = gf_r_l_cu) r_l_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 2, gf = gf_r_l_cu) r_l_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 3, gf = gf_r_l_cu) r_l_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 4, gf = gf_r_l_cu) r_l_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 5, gf = gf_r_l_cu) r_l_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 6, gf = gf_r_l_cu) r_l_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 7, gf = gf_r_l_cu) r_l_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 8, gf = gf_r_l_cu) r_l_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 9, gf = gf_r_l_cu) r_l_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 10, gf = gf_r_l_cu) r_l_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 11, gf = gf_r_l_cu) r_l_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 12, gf = gf_r_l_cu) l_l_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 1, gf = gf_l_l_ff) l_l_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 2, gf = gf_l_l_ff) l_l_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 3, gf = gf_l_l_ff) l_l_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 4, gf = gf_l_l_ff) l_l_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 5, gf = gf_l_l_ff) l_l_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 6, gf = gf_l_l_ff) l_l_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 7, gf = gf_l_l_ff) l_l_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 8, gf = gf_l_l_ff) l_l_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 9, gf = gf_l_l_ff) l_l_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 10, gf = gf_l_l_ff) l_l_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 11, gf = gf_l_l_ff) l_l_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 12, gf = gf_l_l_ff) l_l_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 1, gf = gf_l_l_si) l_l_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 2, gf = gf_l_l_si) l_l_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 3, gf = gf_l_l_si) l_l_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 4, gf = gf_l_l_si) l_l_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 5, gf = gf_l_l_si) l_l_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 6, gf = gf_l_l_si) l_l_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 7, gf = gf_l_l_si) l_l_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 8, gf = gf_l_l_si) l_l_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 9, gf = gf_l_l_si) l_l_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 10, gf = gf_l_l_si) l_l_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 11, gf = gf_l_l_si) l_l_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 12, gf = gf_l_l_si) l_l_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 1, gf = gf_l_l_fc) l_l_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 2, gf = gf_l_l_fc) l_l_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 3, gf = gf_l_l_fc) l_l_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 4, gf = gf_l_l_fc) l_l_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 5, gf = gf_l_l_fc) l_l_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 6, gf = gf_l_l_fc) l_l_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 7, gf = gf_l_l_fc) l_l_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 8, gf = gf_l_l_fc) l_l_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 9, gf = gf_l_l_fc) l_l_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 10, gf = gf_l_l_fc) l_l_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 11, gf = gf_l_l_fc) l_l_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 12, gf = gf_l_l_fc) l_l_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 1, gf = gf_l_l_ch) l_l_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 2, gf = gf_l_l_ch) l_l_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 3, gf = gf_l_l_ch) l_l_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 4, gf = gf_l_l_ch) l_l_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 5, gf = gf_l_l_ch) l_l_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 6, gf = gf_l_l_ch) l_l_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 7, gf = gf_l_l_ch) l_l_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 8, gf = gf_l_l_ch) l_l_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 9, gf = gf_l_l_ch) l_l_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 10, gf = gf_l_l_ch) l_l_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 11, gf = gf_l_l_ch) l_l_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 12, gf = gf_l_l_ch) l_l_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 1, gf = gf_l_l_sl) l_l_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 2, gf = gf_l_l_sl) l_l_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 3, gf = gf_l_l_sl) l_l_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 4, gf = gf_l_l_sl) l_l_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 5, gf = gf_l_l_sl) l_l_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 6, gf = gf_l_l_sl) l_l_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 7, gf = gf_l_l_sl) l_l_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 8, gf = gf_l_l_sl) l_l_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 9, gf = gf_l_l_sl) l_l_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 10, gf = gf_l_l_sl) l_l_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 11, gf = gf_l_l_sl) l_l_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 12, gf = gf_l_l_sl) l_l_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 1, gf = gf_l_l_cu) l_l_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 2, gf = gf_l_l_cu) l_l_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 3, gf = gf_l_l_cu) l_l_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 4, gf = gf_l_l_cu) l_l_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 5, gf = gf_l_l_cu) l_l_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 6, gf = gf_l_l_cu) l_l_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 7, gf = gf_l_l_cu) l_l_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 8, gf = gf_l_l_cu) l_l_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 9, gf = gf_l_l_cu) l_l_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 10, gf = gf_l_l_cu) l_l_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 11, gf = gf_l_l_cu) l_l_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 12, gf = gf_l_l_cu) l_r_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 1, gf = gf_l_r_ff) l_r_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 2, gf = gf_l_r_ff) l_r_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 3, gf = gf_l_r_ff) l_r_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 4, gf = gf_l_r_ff) l_r_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 5, gf = gf_l_r_ff) l_r_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 6, gf = gf_l_r_ff) l_r_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 7, gf = gf_l_r_ff) l_r_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 8, gf = gf_l_r_ff) l_r_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 9, gf = gf_l_r_ff) l_r_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 10, gf = gf_l_r_ff) l_r_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 11, gf = gf_l_r_ff) l_r_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 12, gf = gf_l_r_ff) l_r_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 1, gf = gf_l_r_si) l_r_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 2, gf = gf_l_r_si) l_r_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 3, gf = gf_l_r_si) l_r_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 4, gf = gf_l_r_si) l_r_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 5, gf = gf_l_r_si) l_r_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 6, gf = gf_l_r_si) l_r_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 7, gf = gf_l_r_si) l_r_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 8, gf = gf_l_r_si) l_r_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 9, gf = gf_l_r_si) l_r_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 10, gf = gf_l_r_si) l_r_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 11, gf = gf_l_r_si) l_r_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 12, gf = gf_l_r_si) l_r_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 1, gf = gf_l_r_fc) l_r_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 2, gf = gf_l_r_fc) l_r_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 3, gf = gf_l_r_fc) l_r_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 4, gf = gf_l_r_fc) l_r_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 5, gf = gf_l_r_fc) l_r_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 6, gf = gf_l_r_fc) l_r_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 7, gf = gf_l_r_fc) l_r_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 8, gf = gf_l_r_fc) l_r_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 9, gf = gf_l_r_fc) l_r_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 10, gf = gf_l_r_fc) l_r_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 11, gf = gf_l_r_fc) l_r_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 12, gf = gf_l_r_fc) l_r_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 1, gf = gf_l_r_ch) l_r_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 2, gf = gf_l_r_ch) l_r_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 3, gf = gf_l_r_ch) l_r_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 4, gf = gf_l_r_ch) l_r_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 5, gf = gf_l_r_ch) l_r_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 6, gf = gf_l_r_ch) l_r_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 7, gf = gf_l_r_ch) l_r_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 8, gf = gf_l_r_ch) l_r_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 9, gf = gf_l_r_ch) l_r_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 10, gf = gf_l_r_ch) l_r_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 11, gf = gf_l_r_ch) l_r_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 12, gf = gf_l_r_ch) l_r_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 1, gf = gf_l_r_sl) l_r_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 2, gf = gf_l_r_sl) l_r_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 3, gf = gf_l_r_sl) l_r_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 4, gf = gf_l_r_sl) l_r_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 5, gf = gf_l_r_sl) l_r_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 6, gf = gf_l_r_sl) l_r_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 7, gf = gf_l_r_sl) l_r_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 8, gf = gf_l_r_sl) l_r_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 9, gf = gf_l_r_sl) l_r_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 10, gf = gf_l_r_sl) l_r_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 11, gf = gf_l_r_sl) l_r_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 12, gf = gf_l_r_sl) l_r_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 1, gf = gf_l_r_cu) l_r_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 2, gf = gf_l_r_cu) l_r_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 3, gf = gf_l_r_cu) l_r_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 4, gf = gf_l_r_cu) l_r_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 5, gf = gf_l_r_cu) l_r_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 6, gf = gf_l_r_cu) l_r_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 7, gf = gf_l_r_cu) l_r_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 8, gf = gf_l_r_cu) l_r_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 9, gf = gf_l_r_cu) l_r_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 10, gf = gf_l_r_cu) l_r_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 11, gf = gf_l_r_cu) l_r_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 12, gf = gf_l_r_cu) 5.2 Create Plots plot_r_r_ff_0_0 &lt;- location_quality_plot(r_r_ff_0_0) plot_r_r_ff_0_1 &lt;- location_quality_plot(r_r_ff_0_1) plot_r_r_ff_0_2 &lt;- location_quality_plot(r_r_ff_0_2) plot_r_r_ff_1_0 &lt;- location_quality_plot(r_r_ff_1_0) plot_r_r_ff_1_1 &lt;- location_quality_plot(r_r_ff_1_1) plot_r_r_ff_1_2 &lt;- location_quality_plot(r_r_ff_1_2) plot_r_r_ff_2_0 &lt;- location_quality_plot(r_r_ff_2_0) plot_r_r_ff_2_1 &lt;- location_quality_plot(r_r_ff_2_1) plot_r_r_ff_2_2 &lt;- location_quality_plot(r_r_ff_2_2) plot_r_r_ff_3_0 &lt;- location_quality_plot(r_r_ff_3_0) plot_r_r_ff_3_1 &lt;- location_quality_plot(r_r_ff_3_1) plot_r_r_ff_3_2 &lt;- location_quality_plot(r_r_ff_3_2) plot_r_r_si_0_0 &lt;- location_quality_plot(r_r_si_0_0) plot_r_r_si_0_1 &lt;- location_quality_plot(r_r_si_0_1) plot_r_r_si_0_2 &lt;- location_quality_plot(r_r_si_0_2) plot_r_r_si_1_0 &lt;- location_quality_plot(r_r_si_1_0) plot_r_r_si_1_1 &lt;- location_quality_plot(r_r_si_1_1) plot_r_r_si_1_2 &lt;- location_quality_plot(r_r_si_1_2) plot_r_r_si_2_0 &lt;- location_quality_plot(r_r_si_2_0) plot_r_r_si_2_1 &lt;- location_quality_plot(r_r_si_2_1) plot_r_r_si_2_2 &lt;- location_quality_plot(r_r_si_2_2) plot_r_r_si_3_0 &lt;- location_quality_plot(r_r_si_3_0) plot_r_r_si_3_1 &lt;- location_quality_plot(r_r_si_3_1) plot_r_r_si_3_2 &lt;- location_quality_plot(r_r_si_3_2) plot_r_r_fc_0_0 &lt;- location_quality_plot(r_r_fc_0_0) plot_r_r_fc_0_1 &lt;- location_quality_plot(r_r_fc_0_1) plot_r_r_fc_0_2 &lt;- location_quality_plot(r_r_fc_0_2) plot_r_r_fc_1_0 &lt;- location_quality_plot(r_r_fc_1_0) plot_r_r_fc_1_1 &lt;- location_quality_plot(r_r_fc_1_1) plot_r_r_fc_1_2 &lt;- location_quality_plot(r_r_fc_1_2) plot_r_r_fc_2_0 &lt;- location_quality_plot(r_r_fc_2_0) plot_r_r_fc_2_1 &lt;- location_quality_plot(r_r_fc_2_1) plot_r_r_fc_2_2 &lt;- location_quality_plot(r_r_fc_2_2) plot_r_r_fc_3_0 &lt;- location_quality_plot(r_r_fc_3_0) plot_r_r_fc_3_1 &lt;- location_quality_plot(r_r_fc_3_1) plot_r_r_fc_3_2 &lt;- location_quality_plot(r_r_fc_3_2) plot_r_r_ch_0_0 &lt;- location_quality_plot(r_r_ch_0_0) plot_r_r_ch_0_1 &lt;- location_quality_plot(r_r_ch_0_1) plot_r_r_ch_0_2 &lt;- location_quality_plot(r_r_ch_0_2) plot_r_r_ch_1_0 &lt;- location_quality_plot(r_r_ch_1_0) plot_r_r_ch_1_1 &lt;- location_quality_plot(r_r_ch_1_1) plot_r_r_ch_1_2 &lt;- location_quality_plot(r_r_ch_1_2) plot_r_r_ch_2_0 &lt;- location_quality_plot(r_r_ch_2_0) plot_r_r_ch_2_1 &lt;- location_quality_plot(r_r_ch_2_1) plot_r_r_ch_2_2 &lt;- location_quality_plot(r_r_ch_2_2) plot_r_r_ch_3_0 &lt;- location_quality_plot(r_r_ch_3_0) plot_r_r_ch_3_1 &lt;- location_quality_plot(r_r_ch_3_1) plot_r_r_ch_3_2 &lt;- location_quality_plot(r_r_ch_3_2) plot_r_r_sl_0_0 &lt;- location_quality_plot(r_r_sl_0_0) plot_r_r_sl_0_1 &lt;- location_quality_plot(r_r_sl_0_1) plot_r_r_sl_0_2 &lt;- location_quality_plot(r_r_sl_0_2) plot_r_r_sl_1_0 &lt;- location_quality_plot(r_r_sl_1_0) plot_r_r_sl_1_1 &lt;- location_quality_plot(r_r_sl_1_1) plot_r_r_sl_1_2 &lt;- location_quality_plot(r_r_sl_1_2) plot_r_r_sl_2_0 &lt;- location_quality_plot(r_r_sl_2_0) plot_r_r_sl_2_1 &lt;- location_quality_plot(r_r_sl_2_1) plot_r_r_sl_2_2 &lt;- location_quality_plot(r_r_sl_2_2) plot_r_r_sl_3_0 &lt;- location_quality_plot(r_r_sl_3_0) plot_r_r_sl_3_1 &lt;- location_quality_plot(r_r_sl_3_1) plot_r_r_sl_3_2 &lt;- location_quality_plot(r_r_sl_3_2) plot_r_r_cu_0_0 &lt;- location_quality_plot(r_r_cu_0_0) plot_r_r_cu_0_1 &lt;- location_quality_plot(r_r_cu_0_1) plot_r_r_cu_0_2 &lt;- location_quality_plot(r_r_cu_0_2) plot_r_r_cu_1_0 &lt;- location_quality_plot(r_r_cu_1_0) plot_r_r_cu_1_1 &lt;- location_quality_plot(r_r_cu_1_1) plot_r_r_cu_1_2 &lt;- location_quality_plot(r_r_cu_1_2) plot_r_r_cu_2_0 &lt;- location_quality_plot(r_r_cu_2_0) plot_r_r_cu_2_1 &lt;- location_quality_plot(r_r_cu_2_1) plot_r_r_cu_2_2 &lt;- location_quality_plot(r_r_cu_2_2) plot_r_r_cu_3_0 &lt;- location_quality_plot(r_r_cu_3_0) plot_r_r_cu_3_1 &lt;- location_quality_plot(r_r_cu_3_1) plot_r_r_cu_3_2 &lt;- location_quality_plot(r_r_cu_3_2) plot_r_l_ff_0_0 &lt;- location_quality_plot(r_l_ff_0_0) plot_r_l_ff_0_1 &lt;- location_quality_plot(r_l_ff_0_1) plot_r_l_ff_0_2 &lt;- location_quality_plot(r_l_ff_0_2) plot_r_l_ff_1_0 &lt;- location_quality_plot(r_l_ff_1_0) plot_r_l_ff_1_1 &lt;- location_quality_plot(r_l_ff_1_1) plot_r_l_ff_1_2 &lt;- location_quality_plot(r_l_ff_1_2) plot_r_l_ff_2_0 &lt;- location_quality_plot(r_l_ff_2_0) plot_r_l_ff_2_1 &lt;- location_quality_plot(r_l_ff_2_1) plot_r_l_ff_2_2 &lt;- location_quality_plot(r_l_ff_2_2) plot_r_l_ff_3_0 &lt;- location_quality_plot(r_l_ff_3_0) plot_r_l_ff_3_1 &lt;- location_quality_plot(r_l_ff_3_1) plot_r_l_ff_3_2 &lt;- location_quality_plot(r_l_ff_3_2) plot_r_l_si_0_0 &lt;- location_quality_plot(r_l_si_0_0) plot_r_l_si_0_1 &lt;- location_quality_plot(r_l_si_0_1) plot_r_l_si_0_2 &lt;- location_quality_plot(r_l_si_0_2) plot_r_l_si_1_0 &lt;- location_quality_plot(r_l_si_1_0) plot_r_l_si_1_1 &lt;- location_quality_plot(r_l_si_1_1) plot_r_l_si_1_2 &lt;- location_quality_plot(r_l_si_1_2) plot_r_l_si_2_0 &lt;- location_quality_plot(r_l_si_2_0) plot_r_l_si_2_1 &lt;- location_quality_plot(r_l_si_2_1) plot_r_l_si_2_2 &lt;- location_quality_plot(r_l_si_2_2) plot_r_l_si_3_0 &lt;- location_quality_plot(r_l_si_3_0) plot_r_l_si_3_1 &lt;- location_quality_plot(r_l_si_3_1) plot_r_l_si_3_2 &lt;- location_quality_plot(r_l_si_3_2) plot_r_l_fc_0_0 &lt;- location_quality_plot(r_l_fc_0_0) plot_r_l_fc_0_1 &lt;- location_quality_plot(r_l_fc_0_1) plot_r_l_fc_0_2 &lt;- location_quality_plot(r_l_fc_0_2) plot_r_l_fc_1_0 &lt;- location_quality_plot(r_l_fc_1_0) plot_r_l_fc_1_1 &lt;- location_quality_plot(r_l_fc_1_1) plot_r_l_fc_1_2 &lt;- location_quality_plot(r_l_fc_1_2) plot_r_l_fc_2_0 &lt;- location_quality_plot(r_l_fc_2_0) plot_r_l_fc_2_1 &lt;- location_quality_plot(r_l_fc_2_1) plot_r_l_fc_2_2 &lt;- location_quality_plot(r_l_fc_2_2) plot_r_l_fc_3_0 &lt;- location_quality_plot(r_l_fc_3_0) plot_r_l_fc_3_1 &lt;- location_quality_plot(r_l_fc_3_1) plot_r_l_fc_3_2 &lt;- location_quality_plot(r_l_fc_3_2) plot_r_l_ch_0_0 &lt;- location_quality_plot(r_l_ch_0_0) plot_r_l_ch_0_1 &lt;- location_quality_plot(r_l_ch_0_1) plot_r_l_ch_0_2 &lt;- location_quality_plot(r_l_ch_0_2) plot_r_l_ch_1_0 &lt;- location_quality_plot(r_l_ch_1_0) plot_r_l_ch_1_1 &lt;- location_quality_plot(r_l_ch_1_1) plot_r_l_ch_1_2 &lt;- location_quality_plot(r_l_ch_1_2) plot_r_l_ch_2_0 &lt;- location_quality_plot(r_l_ch_2_0) plot_r_l_ch_2_1 &lt;- location_quality_plot(r_l_ch_2_1) plot_r_l_ch_2_2 &lt;- location_quality_plot(r_l_ch_2_2) plot_r_l_ch_3_0 &lt;- location_quality_plot(r_l_ch_3_0) plot_r_l_ch_3_1 &lt;- location_quality_plot(r_l_ch_3_1) plot_r_l_ch_3_2 &lt;- location_quality_plot(r_l_ch_3_2) plot_r_l_sl_0_0 &lt;- location_quality_plot(r_l_sl_0_0) plot_r_l_sl_0_1 &lt;- location_quality_plot(r_l_sl_0_1) plot_r_l_sl_0_2 &lt;- location_quality_plot(r_l_sl_0_2) plot_r_l_sl_1_0 &lt;- location_quality_plot(r_l_sl_1_0) plot_r_l_sl_1_1 &lt;- location_quality_plot(r_l_sl_1_1) plot_r_l_sl_1_2 &lt;- location_quality_plot(r_l_sl_1_2) plot_r_l_sl_2_0 &lt;- location_quality_plot(r_l_sl_2_0) plot_r_l_sl_2_1 &lt;- location_quality_plot(r_l_sl_2_1) plot_r_l_sl_2_2 &lt;- location_quality_plot(r_l_sl_2_2) plot_r_l_sl_3_0 &lt;- location_quality_plot(r_l_sl_3_0) plot_r_l_sl_3_1 &lt;- location_quality_plot(r_l_sl_3_1) plot_r_l_sl_3_2 &lt;- location_quality_plot(r_l_sl_3_2) plot_r_l_cu_0_0 &lt;- location_quality_plot(r_l_cu_0_0) plot_r_l_cu_0_1 &lt;- location_quality_plot(r_l_cu_0_1) plot_r_l_cu_0_2 &lt;- location_quality_plot(r_l_cu_0_2) plot_r_l_cu_1_0 &lt;- location_quality_plot(r_l_cu_1_0) plot_r_l_cu_1_1 &lt;- location_quality_plot(r_l_cu_1_1) plot_r_l_cu_1_2 &lt;- location_quality_plot(r_l_cu_1_2) plot_r_l_cu_2_0 &lt;- location_quality_plot(r_l_cu_2_0) plot_r_l_cu_2_1 &lt;- location_quality_plot(r_l_cu_2_1) plot_r_l_cu_2_2 &lt;- location_quality_plot(r_l_cu_2_2) plot_r_l_cu_3_0 &lt;- location_quality_plot(r_l_cu_3_0) plot_r_l_cu_3_1 &lt;- location_quality_plot(r_l_cu_3_1) plot_r_l_cu_3_2 &lt;- location_quality_plot(r_l_cu_3_2) plot_l_l_ff_0_0 &lt;- location_quality_plot(l_l_ff_0_0) plot_l_l_ff_0_1 &lt;- location_quality_plot(l_l_ff_0_1) plot_l_l_ff_0_2 &lt;- location_quality_plot(l_l_ff_0_2) plot_l_l_ff_1_0 &lt;- location_quality_plot(l_l_ff_1_0) plot_l_l_ff_1_1 &lt;- location_quality_plot(l_l_ff_1_1) plot_l_l_ff_1_2 &lt;- location_quality_plot(l_l_ff_1_2) plot_l_l_ff_2_0 &lt;- location_quality_plot(l_l_ff_2_0) plot_l_l_ff_2_1 &lt;- location_quality_plot(l_l_ff_2_1) plot_l_l_ff_2_2 &lt;- location_quality_plot(l_l_ff_2_2) plot_l_l_ff_3_0 &lt;- location_quality_plot(l_l_ff_3_0) plot_l_l_ff_3_1 &lt;- location_quality_plot(l_l_ff_3_1) plot_l_l_ff_3_2 &lt;- location_quality_plot(l_l_ff_3_2) plot_l_l_si_0_0 &lt;- location_quality_plot(l_l_si_0_0) plot_l_l_si_0_1 &lt;- location_quality_plot(l_l_si_0_1) plot_l_l_si_0_2 &lt;- location_quality_plot(l_l_si_0_2) plot_l_l_si_1_0 &lt;- location_quality_plot(l_l_si_1_0) plot_l_l_si_1_1 &lt;- location_quality_plot(l_l_si_1_1) plot_l_l_si_1_2 &lt;- location_quality_plot(l_l_si_1_2) plot_l_l_si_2_0 &lt;- location_quality_plot(l_l_si_2_0) plot_l_l_si_2_1 &lt;- location_quality_plot(l_l_si_2_1) plot_l_l_si_2_2 &lt;- location_quality_plot(l_l_si_2_2) plot_l_l_si_3_0 &lt;- location_quality_plot(l_l_si_3_0) plot_l_l_si_3_1 &lt;- location_quality_plot(l_l_si_3_1) plot_l_l_si_3_2 &lt;- location_quality_plot(l_l_si_3_2) plot_l_l_fc_0_0 &lt;- location_quality_plot(l_l_fc_0_0) plot_l_l_fc_0_1 &lt;- location_quality_plot(l_l_fc_0_1) plot_l_l_fc_0_2 &lt;- location_quality_plot(l_l_fc_0_2) plot_l_l_fc_1_0 &lt;- location_quality_plot(l_l_fc_1_0) plot_l_l_fc_1_1 &lt;- location_quality_plot(l_l_fc_1_1) plot_l_l_fc_1_2 &lt;- location_quality_plot(l_l_fc_1_2) plot_l_l_fc_2_0 &lt;- location_quality_plot(l_l_fc_2_0) plot_l_l_fc_2_1 &lt;- location_quality_plot(l_l_fc_2_1) plot_l_l_fc_2_2 &lt;- location_quality_plot(l_l_fc_2_2) plot_l_l_fc_3_0 &lt;- location_quality_plot(l_l_fc_3_0) plot_l_l_fc_3_1 &lt;- location_quality_plot(l_l_fc_3_1) plot_l_l_fc_3_2 &lt;- location_quality_plot(l_l_fc_3_2) plot_l_l_ch_0_0 &lt;- location_quality_plot(l_l_ch_0_0) plot_l_l_ch_0_1 &lt;- location_quality_plot(l_l_ch_0_1) plot_l_l_ch_0_2 &lt;- location_quality_plot(l_l_ch_0_2) plot_l_l_ch_1_0 &lt;- location_quality_plot(l_l_ch_1_0) plot_l_l_ch_1_1 &lt;- location_quality_plot(l_l_ch_1_1) plot_l_l_ch_1_2 &lt;- location_quality_plot(l_l_ch_1_2) plot_l_l_ch_2_0 &lt;- location_quality_plot(l_l_ch_2_0) plot_l_l_ch_2_1 &lt;- location_quality_plot(l_l_ch_2_1) plot_l_l_ch_2_2 &lt;- location_quality_plot(l_l_ch_2_2) plot_l_l_ch_3_0 &lt;- location_quality_plot(l_l_ch_3_0) plot_l_l_ch_3_1 &lt;- location_quality_plot(l_l_ch_3_1) plot_l_l_ch_3_2 &lt;- location_quality_plot(l_l_ch_3_2) plot_l_l_sl_0_0 &lt;- location_quality_plot(l_l_sl_0_0) plot_l_l_sl_0_1 &lt;- location_quality_plot(l_l_sl_0_1) plot_l_l_sl_0_2 &lt;- location_quality_plot(l_l_sl_0_2) plot_l_l_sl_1_0 &lt;- location_quality_plot(l_l_sl_1_0) plot_l_l_sl_1_1 &lt;- location_quality_plot(l_l_sl_1_1) plot_l_l_sl_1_2 &lt;- location_quality_plot(l_l_sl_1_2) plot_l_l_sl_2_0 &lt;- location_quality_plot(l_l_sl_2_0) plot_l_l_sl_2_1 &lt;- location_quality_plot(l_l_sl_2_1) plot_l_l_sl_2_2 &lt;- location_quality_plot(l_l_sl_2_2) plot_l_l_sl_3_0 &lt;- location_quality_plot(l_l_sl_3_0) plot_l_l_sl_3_1 &lt;- location_quality_plot(l_l_sl_3_1) plot_l_l_sl_3_2 &lt;- location_quality_plot(l_l_sl_3_2) plot_l_l_cu_0_0 &lt;- location_quality_plot(l_l_cu_0_0) plot_l_l_cu_0_1 &lt;- location_quality_plot(l_l_cu_0_1) plot_l_l_cu_0_2 &lt;- location_quality_plot(l_l_cu_0_2) plot_l_l_cu_1_0 &lt;- location_quality_plot(l_l_cu_1_0) plot_l_l_cu_1_1 &lt;- location_quality_plot(l_l_cu_1_1) plot_l_l_cu_1_2 &lt;- location_quality_plot(l_l_cu_1_2) plot_l_l_cu_2_0 &lt;- location_quality_plot(l_l_cu_2_0) plot_l_l_cu_2_1 &lt;- location_quality_plot(l_l_cu_2_1) plot_l_l_cu_2_2 &lt;- location_quality_plot(l_l_cu_2_2) plot_l_l_cu_3_0 &lt;- location_quality_plot(l_l_cu_3_0) plot_l_l_cu_3_1 &lt;- location_quality_plot(l_l_cu_3_1) plot_l_l_cu_3_2 &lt;- location_quality_plot(l_l_cu_3_2) plot_l_r_ff_0_0 &lt;- location_quality_plot(l_r_ff_0_0) plot_l_r_ff_0_1 &lt;- location_quality_plot(l_r_ff_0_1) plot_l_r_ff_0_2 &lt;- location_quality_plot(l_r_ff_0_2) plot_l_r_ff_1_0 &lt;- location_quality_plot(l_r_ff_1_0) plot_l_r_ff_1_1 &lt;- location_quality_plot(l_r_ff_1_1) plot_l_r_ff_1_2 &lt;- location_quality_plot(l_r_ff_1_2) plot_l_r_ff_2_0 &lt;- location_quality_plot(l_r_ff_2_0) plot_l_r_ff_2_1 &lt;- location_quality_plot(l_r_ff_2_1) plot_l_r_ff_2_2 &lt;- location_quality_plot(l_r_ff_2_2) plot_l_r_ff_3_0 &lt;- location_quality_plot(l_r_ff_3_0) plot_l_r_ff_3_1 &lt;- location_quality_plot(l_r_ff_3_1) plot_l_r_ff_3_2 &lt;- location_quality_plot(l_r_ff_3_2) plot_l_r_si_0_0 &lt;- location_quality_plot(l_r_si_0_0) plot_l_r_si_0_1 &lt;- location_quality_plot(l_r_si_0_1) plot_l_r_si_0_2 &lt;- location_quality_plot(l_r_si_0_2) plot_l_r_si_1_0 &lt;- location_quality_plot(l_r_si_1_0) plot_l_r_si_1_1 &lt;- location_quality_plot(l_r_si_1_1) plot_l_r_si_1_2 &lt;- location_quality_plot(l_r_si_1_2) plot_l_r_si_2_0 &lt;- location_quality_plot(l_r_si_2_0) plot_l_r_si_2_1 &lt;- location_quality_plot(l_r_si_2_1) plot_l_r_si_2_2 &lt;- location_quality_plot(l_r_si_2_2) plot_l_r_si_3_0 &lt;- location_quality_plot(l_r_si_3_0) plot_l_r_si_3_1 &lt;- location_quality_plot(l_r_si_3_1) plot_l_r_si_3_2 &lt;- location_quality_plot(l_r_si_3_2) plot_l_r_fc_0_0 &lt;- location_quality_plot(l_r_fc_0_0) plot_l_r_fc_0_1 &lt;- location_quality_plot(l_r_fc_0_1) plot_l_r_fc_0_2 &lt;- location_quality_plot(l_r_fc_0_2) plot_l_r_fc_1_0 &lt;- location_quality_plot(l_r_fc_1_0) plot_l_r_fc_1_1 &lt;- location_quality_plot(l_r_fc_1_1) plot_l_r_fc_1_2 &lt;- location_quality_plot(l_r_fc_1_2) plot_l_r_fc_2_0 &lt;- location_quality_plot(l_r_fc_2_0) plot_l_r_fc_2_1 &lt;- location_quality_plot(l_r_fc_2_1) plot_l_r_fc_2_2 &lt;- location_quality_plot(l_r_fc_2_2) plot_l_r_fc_3_0 &lt;- location_quality_plot(l_r_fc_3_0) plot_l_r_fc_3_1 &lt;- location_quality_plot(l_r_fc_3_1) plot_l_r_fc_3_2 &lt;- location_quality_plot(l_r_fc_3_2) plot_l_r_ch_0_0 &lt;- location_quality_plot(l_r_ch_0_0) plot_l_r_ch_0_1 &lt;- location_quality_plot(l_r_ch_0_1) plot_l_r_ch_0_2 &lt;- location_quality_plot(l_r_ch_0_2) plot_l_r_ch_1_0 &lt;- location_quality_plot(l_r_ch_1_0) plot_l_r_ch_1_1 &lt;- location_quality_plot(l_r_ch_1_1) plot_l_r_ch_1_2 &lt;- location_quality_plot(l_r_ch_1_2) plot_l_r_ch_2_0 &lt;- location_quality_plot(l_r_ch_2_0) plot_l_r_ch_2_1 &lt;- location_quality_plot(l_r_ch_2_1) plot_l_r_ch_2_2 &lt;- location_quality_plot(l_r_ch_2_2) plot_l_r_ch_3_0 &lt;- location_quality_plot(l_r_ch_3_0) plot_l_r_ch_3_1 &lt;- location_quality_plot(l_r_ch_3_1) plot_l_r_ch_3_2 &lt;- location_quality_plot(l_r_ch_3_2) plot_l_r_sl_0_0 &lt;- location_quality_plot(l_r_sl_0_0) plot_l_r_sl_0_1 &lt;- location_quality_plot(l_r_sl_0_1) plot_l_r_sl_0_2 &lt;- location_quality_plot(l_r_sl_0_2) plot_l_r_sl_1_0 &lt;- location_quality_plot(l_r_sl_1_0) plot_l_r_sl_1_1 &lt;- location_quality_plot(l_r_sl_1_1) plot_l_r_sl_1_2 &lt;- location_quality_plot(l_r_sl_1_2) plot_l_r_sl_2_0 &lt;- location_quality_plot(l_r_sl_2_0) plot_l_r_sl_2_1 &lt;- location_quality_plot(l_r_sl_2_1) plot_l_r_sl_2_2 &lt;- location_quality_plot(l_r_sl_2_2) plot_l_r_sl_3_0 &lt;- location_quality_plot(l_r_sl_3_0) plot_l_r_sl_3_1 &lt;- location_quality_plot(l_r_sl_3_1) plot_l_r_sl_3_2 &lt;- location_quality_plot(l_r_sl_3_2) plot_l_r_cu_0_0 &lt;- location_quality_plot(l_r_cu_0_0) plot_l_r_cu_0_1 &lt;- location_quality_plot(l_r_cu_0_1) plot_l_r_cu_0_2 &lt;- location_quality_plot(l_r_cu_0_2) plot_l_r_cu_1_0 &lt;- location_quality_plot(l_r_cu_1_0) plot_l_r_cu_1_1 &lt;- location_quality_plot(l_r_cu_1_1) plot_l_r_cu_1_2 &lt;- location_quality_plot(l_r_cu_1_2) plot_l_r_cu_2_0 &lt;- location_quality_plot(l_r_cu_2_0) plot_l_r_cu_2_1 &lt;- location_quality_plot(l_r_cu_2_1) plot_l_r_cu_2_2 &lt;- location_quality_plot(l_r_cu_2_2) plot_l_r_cu_3_0 &lt;- location_quality_plot(l_r_cu_3_0) plot_l_r_cu_3_1 &lt;- location_quality_plot(l_r_cu_3_1) plot_l_r_cu_3_2 &lt;- location_quality_plot(l_r_cu_3_2) r_r_ff &lt;- ggarrange(plot_r_r_ff_0_0,plot_r_r_ff_1_0,plot_r_r_ff_2_0,plot_r_r_ff_3_0, plot_r_r_ff_0_1,plot_r_r_ff_1_1,plot_r_r_ff_2_1,plot_r_r_ff_3_1, plot_r_r_ff_0_2,plot_r_r_ff_1_2,plot_r_r_ff_2_2,plot_r_r_ff_3_2, nrow=3, ncol=4) r_r_si &lt;- ggarrange(plot_r_r_si_0_0,plot_r_r_si_1_0,plot_r_r_si_2_0,plot_r_r_si_3_0, plot_r_r_si_0_1,plot_r_r_si_1_1,plot_r_r_si_2_1,plot_r_r_si_3_1, plot_r_r_si_0_2,plot_r_r_si_1_2,plot_r_r_si_2_2,plot_r_r_si_3_2, nrow=3, ncol=4) r_r_fc &lt;- ggarrange(plot_r_r_fc_0_0,plot_r_r_fc_1_0,plot_r_r_fc_2_0,plot_r_r_fc_3_0, plot_r_r_fc_0_1,plot_r_r_fc_1_1,plot_r_r_fc_2_1,plot_r_r_fc_3_1, plot_r_r_fc_0_2,plot_r_r_fc_1_2,plot_r_r_fc_2_2,plot_r_r_fc_3_2, nrow=3, ncol=4) r_r_ch &lt;- ggarrange(plot_r_r_ch_0_0,plot_r_r_ch_1_0,plot_r_r_ch_2_0,plot_r_r_ch_3_0, plot_r_r_ch_0_1,plot_r_r_ch_1_1,plot_r_r_ch_2_1,plot_r_r_ch_3_1, plot_r_r_ch_0_2,plot_r_r_ch_1_2,plot_r_r_ch_2_2,plot_r_r_ch_3_2, nrow=3, ncol=4) r_r_cu &lt;- ggarrange(plot_r_r_cu_0_0,plot_r_r_cu_1_0,plot_r_r_cu_2_0,plot_r_r_cu_3_0, plot_r_r_cu_0_1,plot_r_r_cu_1_1,plot_r_r_cu_2_1,plot_r_r_cu_3_1, plot_r_r_cu_0_2,plot_r_r_cu_1_2,plot_r_r_cu_2_2,plot_r_r_cu_3_2, nrow=3, ncol=4) r_r_sl &lt;- ggarrange(plot_r_r_sl_0_0,plot_r_r_sl_1_0,plot_r_r_sl_2_0,plot_r_r_sl_3_0, plot_r_r_sl_0_1,plot_r_r_sl_1_1,plot_r_r_sl_2_1,plot_r_r_sl_3_1, plot_r_r_sl_0_2,plot_r_r_sl_1_2,plot_r_r_sl_2_2,plot_r_r_sl_3_2, nrow=3, ncol=4) r_l_ff &lt;- ggarrange(plot_r_l_ff_0_0,plot_r_l_ff_1_0,plot_r_l_ff_2_0,plot_r_l_ff_3_0, plot_r_l_ff_0_1,plot_r_l_ff_1_1,plot_r_l_ff_2_1,plot_r_l_ff_3_1, plot_r_l_ff_0_2,plot_r_l_ff_1_2,plot_r_l_ff_2_2,plot_r_l_ff_3_2, nrow=3, ncol=4) r_l_si &lt;- ggarrange(plot_r_l_si_0_0,plot_r_l_si_1_0,plot_r_l_si_2_0,plot_r_l_si_3_0, plot_r_l_si_0_1,plot_r_l_si_1_1,plot_r_l_si_2_1,plot_r_l_si_3_1, plot_r_l_si_0_2,plot_r_l_si_1_2,plot_r_l_si_2_2,plot_r_l_si_3_2, nrow=3, ncol=4) r_l_fc &lt;- ggarrange(plot_r_l_fc_0_0,plot_r_l_fc_1_0,plot_r_l_fc_2_0,plot_r_l_fc_3_0, plot_r_l_fc_0_1,plot_r_l_fc_1_1,plot_r_l_fc_2_1,plot_r_l_fc_3_1, plot_r_l_fc_0_2,plot_r_l_fc_1_2,plot_r_l_fc_2_2,plot_r_l_fc_3_2, nrow=3, ncol=4) r_l_ch &lt;- ggarrange(plot_r_l_ch_0_0,plot_r_l_ch_1_0,plot_r_l_ch_2_0,plot_r_l_ch_3_0, plot_r_l_ch_0_1,plot_r_l_ch_1_1,plot_r_l_ch_2_1,plot_r_l_ch_3_1, plot_r_l_ch_0_2,plot_r_l_ch_1_2,plot_r_l_ch_2_2,plot_r_l_ch_3_2, nrow=3, ncol=4) r_l_cu &lt;- ggarrange(plot_r_l_cu_0_0,plot_r_l_cu_1_0,plot_r_l_cu_2_0,plot_r_l_cu_3_0, plot_r_l_cu_0_1,plot_r_l_cu_1_1,plot_r_l_cu_2_1,plot_r_l_cu_3_1, plot_r_l_cu_0_2,plot_r_l_cu_1_2,plot_r_l_cu_2_2,plot_r_l_cu_3_2, nrow=3, ncol=4) r_l_sl &lt;- ggarrange(plot_r_l_sl_0_0,plot_r_l_sl_1_0,plot_r_l_sl_2_0,plot_r_l_sl_3_0, plot_r_l_sl_0_1,plot_r_l_sl_1_1,plot_r_l_sl_2_1,plot_r_l_sl_3_1, plot_r_l_sl_0_2,plot_r_l_sl_1_2,plot_r_l_sl_2_2,plot_r_l_sl_3_2, nrow=3, ncol=4) l_l_ff &lt;- ggarrange(plot_l_l_ff_0_0,plot_l_l_ff_1_0,plot_l_l_ff_2_0,plot_l_l_ff_3_0, plot_l_l_ff_0_1,plot_l_l_ff_1_1,plot_l_l_ff_2_1,plot_l_l_ff_3_1, plot_l_l_ff_0_2,plot_l_l_ff_1_2,plot_l_l_ff_2_2,plot_l_l_ff_3_2, nrow=3, ncol=4) l_l_si &lt;- ggarrange(plot_l_l_si_0_0,plot_l_l_si_1_0,plot_l_l_si_2_0,plot_l_l_si_3_0, plot_l_l_si_0_1,plot_l_l_si_1_1,plot_l_l_si_2_1,plot_l_l_si_3_1, plot_l_l_si_0_2,plot_l_l_si_1_2,plot_l_l_si_2_2,plot_l_l_si_3_2, nrow=3, ncol=4) l_l_fc &lt;- ggarrange(plot_l_l_fc_0_0,plot_l_l_fc_1_0,plot_l_l_fc_2_0,plot_l_l_fc_3_0, plot_l_l_fc_0_1,plot_l_l_fc_1_1,plot_l_l_fc_2_1,plot_l_l_fc_3_1, plot_l_l_fc_0_2,plot_l_l_fc_1_2,plot_l_l_fc_2_2,plot_l_l_fc_3_2, nrow=3, ncol=4) l_l_ch &lt;- ggarrange(plot_l_l_ch_0_0,plot_l_l_ch_1_0,plot_l_l_ch_2_0,plot_l_l_ch_3_0, plot_l_l_ch_0_1,plot_l_l_ch_1_1,plot_l_l_ch_2_1,plot_l_l_ch_3_1, plot_l_l_ch_0_2,plot_l_l_ch_1_2,plot_l_l_ch_2_2,plot_l_l_ch_3_2, nrow=3, ncol=4) l_l_cu &lt;- ggarrange(plot_l_l_cu_0_0,plot_l_l_cu_1_0,plot_l_l_cu_2_0,plot_l_l_cu_3_0, plot_l_l_cu_0_1,plot_l_l_cu_1_1,plot_l_l_cu_2_1,plot_l_l_cu_3_1, plot_l_l_cu_0_2,plot_l_l_cu_1_2,plot_l_l_cu_2_2,plot_l_l_cu_3_2, nrow=3, ncol=4) l_l_sl &lt;- ggarrange(plot_l_l_sl_0_0,plot_l_l_sl_1_0,plot_l_l_sl_2_0,plot_l_l_sl_3_0, plot_l_l_sl_0_1,plot_l_l_sl_1_1,plot_l_l_sl_2_1,plot_l_l_sl_3_1, plot_l_l_sl_0_2,plot_l_l_sl_1_2,plot_l_l_sl_2_2,plot_l_l_sl_3_2, nrow=3, ncol=4) l_r_ff &lt;- ggarrange(plot_l_r_ff_0_0,plot_l_r_ff_1_0,plot_l_r_ff_2_0,plot_l_r_ff_3_0, plot_l_r_ff_0_1,plot_l_r_ff_1_1,plot_l_r_ff_2_1,plot_l_r_ff_3_1, plot_l_r_ff_0_2,plot_l_r_ff_1_2,plot_l_r_ff_2_2,plot_l_r_ff_3_2, nrow=3, ncol=4) l_r_si &lt;- ggarrange(plot_l_r_si_0_0,plot_l_r_si_1_0,plot_l_r_si_2_0,plot_l_r_si_3_0, plot_l_r_si_0_1,plot_l_r_si_1_1,plot_l_r_si_2_1,plot_l_r_si_3_1, plot_l_r_si_0_2,plot_l_r_si_1_2,plot_l_r_si_2_2,plot_l_r_si_3_2, nrow=3, ncol=4) l_r_fc &lt;- ggarrange(plot_l_r_fc_0_0,plot_l_r_fc_1_0,plot_l_r_fc_2_0,plot_l_r_fc_3_0, plot_l_r_fc_0_1,plot_l_r_fc_1_1,plot_l_r_fc_2_1,plot_l_r_fc_3_1, plot_l_r_fc_0_2,plot_l_r_fc_1_2,plot_l_r_fc_2_2,plot_l_r_fc_3_2, nrow=3, ncol=4) l_r_ch &lt;- ggarrange(plot_l_r_ch_0_0,plot_l_r_ch_1_0,plot_l_r_ch_2_0,plot_l_r_ch_3_0, plot_l_r_ch_0_1,plot_l_r_ch_1_1,plot_l_r_ch_2_1,plot_l_r_ch_3_1, plot_l_r_ch_0_2,plot_l_r_ch_1_2,plot_l_r_ch_2_2,plot_l_r_ch_3_2, nrow=3, ncol=4) l_r_cu &lt;- ggarrange(plot_l_r_cu_0_0,plot_l_r_cu_1_0,plot_l_r_cu_2_0,plot_l_r_cu_3_0, plot_l_r_cu_0_1,plot_l_r_cu_1_1,plot_l_r_cu_2_1,plot_l_r_cu_3_1, plot_l_r_cu_0_2,plot_l_r_cu_1_2,plot_l_r_cu_2_2,plot_l_r_cu_3_2, nrow=3, ncol=4) l_r_sl &lt;- ggarrange(plot_l_r_sl_0_0,plot_l_r_sl_1_0,plot_l_r_sl_2_0,plot_l_r_sl_3_0, plot_l_r_sl_0_1,plot_l_r_sl_1_1,plot_l_r_sl_2_1,plot_l_r_sl_3_1, plot_l_r_sl_0_2,plot_l_r_sl_1_2,plot_l_r_sl_2_2,plot_l_r_sl_3_2, nrow=3, ncol=4) "],["visualizing-resulting-plots.html", "Chapter 6 Visualizing Resulting Plots 6.1 Plot Outputs 6.2 Compile Results into 1 Lookup Table", " Chapter 6 Visualizing Resulting Plots 6.1 Plot Outputs The resulting plots showcase the change in run expectancy for every distinctive combination of handedness, pitch type, and count. It’s important to highlight that the output values (change in run expectancy) exhibit a notable variance in range depending on the count during which the pitch is thrown. For instance, pitches in 0-0 counts have less impact than pitches in 3-2 counts. This discrepancy in leverage introduces a challenge when attempting to formulate a pitch location quality metric. Analyzing a pitcher’s season data could be heavily skewed by pitches thrown in high-leverage counts compared to those in low-leverage counts. A simple aggregation, like the average pitch location quality, might be disproportionately influenced by counts with higher leverage. To address this issue, I’ll normalize the output values of each plot, transforming them to fall within a consistent range of 0 to 1. This normalization ensures that pitches from diverse situations can be evaluated on an equal scale, providing a more accurate and unbiased assessment. r_r_ff r_r_si r_r_fc r_r_ch r_r_cu r_r_sl r_l_ff r_l_si r_l_fc r_l_ch r_l_cu r_l_sl l_l_ff l_l_si l_l_fc l_l_ch l_l_cu l_l_sl l_r_ff l_r_si l_r_fc l_r_ch l_r_cu l_r_sl 6.2 Compile Results into 1 Lookup Table hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) huge_lookup &lt;- huge_lookup %&gt;% inner_join(hand, join_by(hand==hand_id)) %&gt;% select(-hand) %&gt;% rename(hand=hand.y) %&gt;% inner_join(pitch_type, join_by(pitch_type==pitch_type_id)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type.y) %&gt;% inner_join(count, join_by(count==count_id)) %&gt;% select(-count) %&gt;% rename(count=count.y) %&gt;% select(hand, pitch_type, count, x, y, pq) rm(hand, pitch_type, count) "],["applying-results-to-2023-season.html", "Chapter 7 Applying Results to 2023 Season 7.1 Cleaning 2023 Dataset 7.2 Location Quality by Pitch Type 7.3 Location Quality by Count 7.4 Final Cleaning", " Chapter 7 Applying Results to 2023 Season Now, with the compiled pitch quality data frame, we have the means to associate a pitch location value with each pitch in a given season, such as 2023. It’s important to note that outlier pitches falling outside the 99% region won’t have a corresponding pitch value for now. As a temporary solution, these outliers are excluded from the ongoing analysis. In the following steps, I’ll reload the 2023 season data and perform some cleaning before integrating the pitch quality lookup data frame. 7.1 Cleaning 2023 Dataset mlbraw2023 &lt;- read.csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2023.csv&quot;) mlbraw2023$game_date &lt;- as.Date(mlbraw2023$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(events = if_else(is.na(events) | events == &quot;&quot;, type, events)) %&gt;% mutate(events = if_else(events == &quot;B&quot;, &quot;ball&quot;, if_else(events == &quot;S&quot;, &quot;strike&quot;, events))) %&gt;% mutate(count = paste(balls, strikes, sep=&quot;-&quot;)) %&gt;% mutate(hand = paste(p_throws, stand, sep = &quot;v&quot;)) %&gt;% select(player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z) mlbraw2023 &lt;- mlbraw2023 %&gt;% filter(pitch_type %in% c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;FS&quot;,&quot;CH&quot;,&quot;CU&quot;, &quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;,&quot;SL&quot;,&quot;ST&quot;)) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_type2 = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;), &quot;CU&quot;, if_else(pitch_type %in% c(&quot;CH&quot;,&quot;FS&quot;), &quot;CH&quot;, if_else(pitch_type %in% c(&quot;SL&quot;,&quot;ST&quot;), &quot;SL&quot;, pitch_type)))) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(huge_lookup, join_by(hand==hand, pitch_type2==pitch_type, count==count, plate_x==x, plate_z==y)) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_type = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;), &quot;CU&quot;, pitch_type)) %&gt;% select(-pitch_type2) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_name = if_else( pitch_name == &quot;4-Seam Fastball&quot;, &quot;Fastball&quot;, if_else(pitch_name %in% c(&quot;Curveball&quot;,&quot;Slow Curve&quot;,&quot;Knuckle Curve&quot;, &quot;Slurve&quot;), &quot;Curveball&quot;, if_else(pitch_name == &quot;Split-Finger&quot;, &quot;Splitter&quot;, pitch_name)))) 7.2 Location Quality by Pitch Type I’ll briefly profile the resulting pitch quality metric. Accounting for all pitches in 2023 with a corresponding pitch location quality number, here is the distribution of values based on pitch type. Across all 6 pitch type levels, a similar distribution pattern emerges. We see the highest peak of around 0.8 across all pitch types followed by a lower peak around 0.25. 4-Seam Fastballs, Sinkers, and Cutters have better overall pitch location values compared to Changeups. Changeups have a more even distribution of values from 0 to 1. Meaning we would expect pitchers throwing a high rate of Changeups in 2023 to generally score lower than other pitchers. ff &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;FF&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;4-seam fastballs&quot;)+ theme_classic() si &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;SI&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;sinkers&quot;)+ theme_classic() fc &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;FC&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;cutters&quot;)+ theme_classic() ch &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;CH&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;changeups&quot;)+ theme_classic() cu &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;CU&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;curveballs&quot;)+ theme_classic() sl &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;SL&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;sliders&quot;)+ theme_classic() ggarrange(ff, si, fc, ch, cu, sl, ncol=2, nrow=3) ## Warning: Removed 1 rows containing missing values (`geom_bar()`). rm(ff, si, fc, ch, cu, sl) 7.3 Location Quality by Count zero_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-0&quot;)+ theme_classic() zero_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-1&quot;)+ theme_classic() zero_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-2&quot;)+ theme_classic() one_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-0&quot;)+ theme_classic() one_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-1&quot;)+ theme_classic() one_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-2&quot;)+ theme_classic() two_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-0&quot;)+ theme_classic() two_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-1&quot;)+ theme_classic() two_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-2&quot;)+ theme_classic() three_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-0&quot;)+ theme_classic() three_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-1&quot;)+ theme_classic() three_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-2&quot;)+ theme_classic() ggarrange(zero_zero, zero_one, zero_two, one_zero, one_one, one_two, two_zero, two_one, two_two, three_zero, three_one, three_two , ncol=3, nrow=4) rm(zero_zero, zero_one, zero_two, one_zero, one_one, one_two, two_zero, two_one, two_two, three_zero, three_one, three_two) 7.4 Final Cleaning Here is the final cleaning I’ll apply to the 2023 data frame before plugging it into a dashboard and view how pitchers ranked across this new pitch location metric. top100 &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% count() %&gt;% ungroup() %&gt;% arrange(desc(n)) %&gt;% head(100) %&gt;% select(-n) top100 &lt;- top100$player_name mlbraw2023 &lt;- mlbraw2023 %&gt;% filter(player_name %in% top100) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Su\\303\\241rez&quot;, &quot;Suarez&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Berr\\303\\255os, Jos\\303\\251&quot;, &quot;Berrios, Jose&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;P\\303\\251rez, Mart\\303\\255n&quot;, &quot;Perez, Martin&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;L\\303\\263pez&quot;, &quot;Lopez&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Jes\\303\\272s&quot;, &quot;Jesus&quot;)) rm(top100) pitch_type_perc &lt;- mlbraw2023 %&gt;%group_by(player_name, pitch_type) %&gt;% count() %&gt;% ungroup() %&gt;% inner_join(mlbraw2023 %&gt;%group_by(player_name) %&gt;% count() %&gt;% ungroup(), join_by(player_name)) %&gt;% mutate(pitch_type_perc = 100*round(n.x/n.y, 2)) %&gt;% select(player_name, pitch_type, pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(pitch_type_perc, join_by(player_name, pitch_type)) rm(pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% separate(player_name, c(&quot;name1&quot;, &quot;name2&quot;), &quot;, &quot;) %&gt;% mutate(player_name = paste(name2, name1, sep = &quot; &quot;)) %&gt;% select(player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z, pq, pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% summarise(pq=mean(pq)) %&gt;% ungroup() %&gt;% arrange(desc(pq)) %&gt;% mutate(rank = row_number()) %&gt;% mutate(player_rank = paste(rank, &quot; - &quot;, player_name)) %&gt;% inner_join(mlbraw2023, join_by(player_name)) %&gt;% rename(pq = pq.y) %&gt;% select(player_rank, player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z, pq, pitch_type_perc) %&gt;% mutate(player_name = player_rank) %&gt;% select(-player_rank) mlbraw2023$pitch_type &lt;- factor(mlbraw2023$pitch_type, levels = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;FS&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;,&quot;ST&quot;)) mlbraw2023$pitch_name &lt;- factor(mlbraw2023$pitch_name, levels = c(&quot;Sweeper&quot;,&quot;Slider&quot;,&quot;Curveball&quot;,&quot;Changeup&quot;, &quot;Splitter&quot;,&quot;Cutter&quot;,&quot;Sinker&quot;,&quot;Fastball&quot;)) color_pitch &lt;- tibble(pitch_name = unique(mlbraw2023$pitch_name), colors = c(&quot;#FBB4AE&quot;,&quot;#B3CDE3&quot;,&quot;#CCEBC5&quot;,&quot;#DECBE4&quot;, &quot;#FED9A6&quot;,&quot;#FFFFCC&quot;,&quot;#E5D8BD&quot;,&quot;#FDDAEC&quot;)) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(color_pitch, join_by(pitch_name)) rm(color_pitch) mlbraw2023$pq &lt;- as.double(mlbraw2023$pq) text &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% summarise(pq= round(mean(pq),3), .groups = &#39;drop&#39;) loli &lt;- mlbraw2023 %&gt;% group_by(player_name, pitch_name, pitch_type_perc, colors) %&gt;% summarise(pq= round(mean(pq),2), .groups = &#39;drop&#39;) %&gt;% filter(pitch_type_perc &gt; 2) bar &lt;- mlbraw2023 %&gt;% select(player_name, pq) pie &lt;- mlbraw2023 %&gt;% group_by(player_name, pitch_name, colors) %&gt;% count() %&gt;% inner_join(mlbraw2023 %&gt;% group_by(player_name) %&gt;% count(), join_by(player_name)) %&gt;% mutate(p=100*round(n.x/n.y, 2)) %&gt;% select(-n.x, -n.y) %&gt;% filter(p &gt; 2) write_csv(text,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/text.csv&quot;) write_csv(loli,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/loli.csv&quot;) write_csv(bar,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/bar.csv&quot;) write_csv(pie,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/pie.csv&quot;) "],["shiny-dashbaord.html", "Chapter 8 Shiny Dashbaord", " Chapter 8 Shiny Dashbaord https://drose1988.shinyapps.io/location_quality_app/ "],["project-takeaways-and-limitations.html", "Chapter 9 Project Takeaways and Limitations", " Chapter 9 Project Takeaways and Limitations As I move forward with testing and refining this pitch location metric, my primary objectives include assessing its reliability and exploring various applications. One key avenue for exploration involves tracking how a pitcher’s quality of location evolves over time. This longitudinal analysis could uncover patterns in a pitcher’s performance, shedding light on the consistency or fluctuations in their pitch location effectiveness. Additionally, I plan to conduct comparative analyses to evaluate the correlation between the proposed metric and overall pitcher performance as reflected in game results. Understanding the strength of this correlation will be crucial in determining the metric’s predictive power and its ability to capture nuances that contribute to a pitcher’s success or challenges on the mound. However, it’s essential to acknowledge the current limitations of the project metric. One notable concern is the uniform evaluation of pitches within distinct pitch type classes, regardless of other critical characteristics. For instance, comparing two 4-Seam Fastballs solely based on location overlooks essential factors such as velocity, spin rate, movement, and release point. An 89 MPH fastball placed at the top of the strike zone differs significantly from a 99 MPH fastball in the same location. Recognizing these nuances is crucial, and while I intentionally omitted certain factors for simplicity, future iterations may explore ways to incorporate additional dimensions of pitch quality. The variability in the number of observations across the 288 data frames highlights another challenge. Some combinations of handedness, pitch type, and count result in well-defined plots with distinct regions of good and bad location quality, while others appear more ambiguous. Addressing this variability will involve refining the metric to ensure robust evaluations across all unique situations. The treatment of pitch types, such as Splitters and Changeups, requires further consideration. While these pitches share similarities in velocity and movement, they possess distinct characteristics that merit separate evaluations. Future iterations may involve refining the classification of certain pitch types to enhance the metric’s precision. The exclusion of outlier pitches, while done for simplicity, has implications for the comprehensiveness of the metric. Pitches falling outside the 99% range established by a particular pitch type are currently disregarded. Recognizing the potential impact of outlier pitches, I plan to explore methodologies that appropriately incorporate extreme cases into the analysis. In summary, this project aims to bring fresh perspectives to pitcher evaluations in 2023 by emphasizing the significance of pitch location, a facet that might be underappreciated in the current baseball analytics landscape dominated by Statcast data. As this new location metric evolves, the goal is to provide a more comprehensive understanding of pitcher performance, incorporating factors beyond the conventional metrics. I look forward to refining and expanding this approach to contribute valuable insights to the field of baseball analytics. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
