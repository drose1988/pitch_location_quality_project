[["index.html", "Quality of Location - developing a new pitch metric Chapter 1 Introduction 1.1 Project Overview", " Quality of Location - developing a new pitch metric Doug Rose 2023-12-14 Chapter 1 Introduction 1.1 Project Overview The baseball industry has become increasingly more data-driven in recent years with organizations relying more and more advanced metrics and statistical analysis in their key decision making processes. This ongoing trend has brought fans an explosion of new information in how we can evaluate MLB players. Statcast technology generates massive amounts of data related to ball movement tracking, baseball fans now have a clearer understanding of how metrics like release speed, spin rate, horizontal and vertical pitch movement impact the quality of a pitch thrown by a pitcher. Websites like Baseball Savant and Fangraphs offer a wealth information on any MLB pitcher covering batted ball results, effectiveness of pitch arsenal, profiling of each pitch type’s velocity, pitch movement, spin rate etc. There is certainly no shortage of available analytics related to MLB players in 2023. In my search for emerging baseball metrics attempting to paint a full picture of how good a pitcher is or how good an individual pitch is, I’ve found that one piece of the puzzle is often underrepresented: pitch level location quality. Some metrics exist that effectively detail generally how good they are at locating pitches like BB%, FIP (Fielding Independent Pitching) to name a few. I have yet to come across a metric that evaluates pitchers on the basis of how good are the locations they throw their pitches. The Baseball Savant website includes player dashboards with distributions of a pitcher’s pitches in terms of location zone type regions. Zone types being heart, shadow, chase, waste. Though comparing pitchers on how their distribution of zone type regions isn’t so straightforward. One might assume that an ideal pitch location would be in the shadow region, so pitchers with the higher rate of shadow region should be the best at locating their pitches. But what if a pitch is thrown in a shadow region on a 3-0 count? And if that pitch is technically outside the strike zone, is it really a better location than a 3-0 pitch located in the heart of the plate? Furthermore, you would expect the pitch type to factor into the quality of the location. Is a 4-seam fastball thrown at the top of the strike zone in a 2-0 count really the same location quality as a curveball thrown in the same location in a 2-0 count? If you have enough of an understanding of baseball you’d conclude that no, these two pitches are not same in terms of location quality. So evaluating the quality of a pitch’s location is not that simple. The circumstance in which the pitch is made influences the quality of the pitch location. My aim in this project is to create a pitch-level metric that evaluates the quality of an individual pitch’s location. Several factors influence the metric including: the horizontal distance from the plate as the ball passes the plate (plate_x), the vertical height of the ball from the ground as it passes the plate (plate_z), the pitch type thrown (4-seam fastball, sinker, slider, curveball etc.), and the hitter count the pitch is thrown in (0-1, 2-2, 3-2 etc.) We can visualize the output and compare pitches under different circumstances to see what actually are ideal pitch locations given a set of circumstances and what locations are less than ideal. Finally these output can be applied to an pitch thrown in previous seasons by particular players so we can effectively compare players on how effective they are at locating pitches. Is a player better at location his fastball than his curveball? Has his overall pitch location been improving throughout the year or across his career? These are questions that hope to be answered by applying a new location quality metric. Let’s get started. "],["loading-cleaning-validating-transforming.html", "Chapter 2 Loading, Cleaning, Validating, Transforming 2.1 Loading Dataset 2.2 Explain Variables of Interest 2.3 Create New Variables 2.4 Validating Count, Handedness, Game Year 2.5 Remove and Transform Event Values 2.6 Event Outcome Frequency by Count 2.7 Average Delta Run Expectancy 2.8 Join Lookup Table to Data Set 2.9 Addressing Pitch Types 2.10 Cleaning Pitch Locations 2.11 Count of All Observations", " Chapter 2 Loading, Cleaning, Validating, Transforming 2.1 Loading Dataset We’ll start by loading in Statcast data from the 2014 MLB season through the 2023 season, hosted on the baseball savant website. Each records represents a single pitch and every single pitch contains a wealth of information (93 fields). This code reads in each years worth of pitches (roughly 710,000 pitches per year) stored locally. To reproduce the following scripts for the rest of the project, each season’s worth of data will need to be scraped and stored with the scripts included in the github folder. rm(list = ls()) mlbraw2014 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2014.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2015 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2015.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2016 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2016.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2017 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2017.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2018 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2018.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2019 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2019.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2020 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2020.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2021 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2021.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2022 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2022.csv&quot;,show_col_types=0) %&gt;% suppressMessages() mlbraw2023 &lt;- read_csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2023.csv&quot;,show_col_types=0) %&gt;% suppressMessages() Format the game_date column to ensure all years have the same format. mlbraw2014$game_date &lt;- as.Date(mlbraw2014$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2015$game_date &lt;- as.Date(mlbraw2015$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2016$game_date &lt;- as.Date(mlbraw2016$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2017$game_date &lt;- as.Date(mlbraw2017$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2018$game_date &lt;- as.Date(mlbraw2018$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2019$game_date &lt;- as.Date(mlbraw2019$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2020$game_date &lt;- as.Date(mlbraw2020$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2021$game_date &lt;- as.Date(mlbraw2021$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2022$game_date &lt;- as.Date(mlbraw2022$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2023$game_date &lt;- as.Date(mlbraw2023$game_date, format=&quot;%m/%d/%y&quot;) Create a single data frame containing all years and remove individual year data frames. mlbraw &lt;- bind_rows(mlbraw2014, mlbraw2015, mlbraw2016, mlbraw2017, mlbraw2018, mlbraw2019, mlbraw2020, mlbraw2021, mlbraw2022, mlbraw2023) mlbraw &lt;- mlbraw %&gt;% arrange(desc(game_year), desc(game_date), game_pk) rm(mlbraw2014, mlbraw2015, mlbraw2016, mlbraw2017, mlbraw2018, mlbraw2019, mlbraw2020, mlbraw2021, mlbraw2022, mlbraw2023) 2.2 Explain Variables of Interest With a single data frame containing all MLB pitches the past 10 years, I’ll start to limit it to only the variables relevant to the project. game_year: simply the year the game was played pitch_name: name of the pitch type thrown by the pitcher (Fastball, Curveball etc.) pitch_type: abbreviated pitch_name (FF represents a 4-Seam Fastball) p_throws: does the pitcher throw right-handed or left-handed stand: does the batter stand right-handed or left-handed balls: how many balls were in the count before the pitch of record strikes: how many strikes were in the count before the pitch of record events: what event took place as a result of this pitch (single, walk, hit by pitch, home run) plate_x: the horizontal location of the pitch as its crossing the plate, measured in feet away from the center of the plate plate_z: the vertical location of the pitch as its crossing the plate, measured in feet off the ground 2.3 Create New Variables The final data set will be a cleaned version of mlbraw containing columns: year, p_type, count, hand, events, plate_x, plate_z, lw. First I’ll start by creating single column detailing the outcome of an individual pitch (each row). The events column only displays a value if that pitch leads to a batter outcome (walk, single, etc.). NA values represent pitches made that don’t end the at-bats, like balls and strikes. So this new events column details the result of every pitch. Also, I’ll want to combine the strikes and balls values creating a new count column. This represents the batter’s count state each pitch occurs in. The stand column specifies whether the batter hits right-handed or left-handed. The p_throws column specifies whether the pitcher throws right-handed or left-handed. For the purposes or this project I’m interested in the combination of the batter/pitcher handedness. The new column hand details this. mlbraw &lt;- mlbraw %&gt;% mutate(events = if_else(is.na(events) | events == &quot;&quot;, type, events)) %&gt;% mutate(events = if_else(events == &quot;B&quot;, &quot;ball&quot;, if_else(events == &quot;S&quot;, &quot;strike&quot;, events))) %&gt;% mutate(count = paste(balls, strikes, sep=&quot;-&quot;)) %&gt;% mutate(hand = paste(p_throws, stand, sep = &quot;v&quot;)) mlbraw &lt;- mlbraw %&gt;% select(game_year, hand, count, pitch_type, pitch_name, events, plate_x, plate_z, delta_run_exp) A batter’s count can only be one of 12 possible counts so I’ll filter the data removing impossible counts. And also filter out impossible events in particular counts. (ex. A batter can’t draw a walk in a 2-2 count) mlbraw &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;, &quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw &lt;- mlbraw %&gt;% filter(!(count == &quot;3-2&quot; &amp; events == &quot;ball&quot;)) %&gt;% filter(!(count == &quot;3-1&quot; &amp; events == &quot;ball&quot;)) %&gt;% filter(!(count == &quot;2-2&quot; &amp; events == &quot;walk&quot;)) %&gt;% filter(!(count == &quot;2-1&quot; &amp; events == &quot;walk&quot;)) Change the data type of these variables to factors limiting the possible values and setting orders. mlbraw$count &lt;- factor(mlbraw$count, levels=c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;, &quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw$hand &lt;- factor(mlbraw$hand, levels=c(&quot;RvR&quot;, &quot;RvL&quot;, &quot;LvR&quot;, &quot;LvL&quot;)) mlbraw$game_year &lt;- factor(mlbraw$game_year, levels=c(&quot;2014&quot;,&quot;2015&quot;,&quot;2016&quot;,&quot;2017&quot;, &quot;2018&quot;,&quot;2019&quot;,&quot;2020&quot;,&quot;2021&quot;, &quot;2022&quot;,&quot;2023&quot;)) Finally, I’ll remove rows with NA values in our columns of interest. mlbraw &lt;- mlbraw %&gt;% filter(!is.na(game_year), !is.na(hand), !is.na(count), !is.na(pitch_type), !is.na(pitch_name), !is.na(events), !is.na(plate_x), !is.na(plate_z), !is.na(delta_run_exp)) 2.4 Validating Count, Handedness, Game Year plot1 &lt;- mlbraw %&gt;% group_by(count) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(p= n/ sum(n)) %&gt;% select(-n) ggplot(data=plot1, aes(x=p, y=fct_rev(count)))+ geom_col(fill=&quot;steelblue3&quot;) + geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.1, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Batter Count distribution \\n&quot;)+ theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.text.y = element_text(hjust=1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.27)+ coord_cartesian(xlim = c(0, 0.27), expand = FALSE) The graph above shows the distribution of batter counts. Here I can start to get an idea of how much data there is to work with to build a location metric. 0-0 counts are well accounted for making up 26% of all pitches, while pitches in 3 ball counts are more scarce. plot2 &lt;- mlbraw %&gt;% group_by(hand) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(p= n/ sum(n)) %&gt;% select(-n) ggplot(data=plot2, aes(x=p, y=reorder(hand,p)))+ geom_col(fill=&quot;steelblue3&quot;) + geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.3, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Pitcher and Batter Handedness distribution \\n&quot;) + theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), #axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.43)+ coord_cartesian(xlim = c(0, 0.4), expand = FALSE) plot3 &lt;- mlbraw %&gt;% group_by(game_year) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(p= n/ sum(n)) %&gt;% select(-n) ggplot(data=plot3, aes(x=p, y=game_year))+ geom_col(fill=&quot;steelblue3&quot;) + geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.3, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Pitcher and Batter Handedness distribution \\n&quot;) + theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), #axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.43)+ coord_cartesian(xlim = c(0, 0.15), expand = FALSE) As expected, the data set is split pretty evenly by game year. Teams plays 162 regular season games per year, giving me about 2400 games worth of data per year. The only exception is the 60 game 2020 season due to COVID-19. 2.5 Remove and Transform Event Values The events column may contain some other game event description not related to the pitch being thrown. If the pitcher picks off the runner leading off first base, that event will show up as a record in the data set. If a coach argues in between pitches and gets ejected from the game, that event will show up as a record in the data set. For the purpose of this project, I am only concerned with pitches thrown, and specifically competitive pitches where legitimate attempts are made by the batter. This is a somewhat subjective criteria, but I’ve chosen to limit the data set and remove the following events. mlbraw &lt;- mlbraw %&gt;% filter(!(events %in% c(&quot;catcher_interf&quot;,&quot;caught_stealing_2b&quot;,&quot;caught_stealing_3b&quot;, &quot;caught_stealing_home&quot;,&quot;ejection&quot;,&quot;field_error&quot;,&quot;game_advisory&quot;, &quot;intent_walk&quot;,&quot;other_out&quot;,&quot;passed_ball&quot;,&quot;pickoff_1b&quot;, &quot;pickoff_2b&quot;,&quot;pickoff_3b&quot;,&quot;pickoff_caught_stealing_2b&quot;, &quot;pickoff_caught_stealing_3b&quot;,&quot;pickoff_caught_stealing_home&quot;, &quot;pickoff_error_2b&quot;,&quot;pickoff_error_3b&quot;,&quot;pitchout&quot;, &quot;runner_double_play&quot;,&quot;stolen_base_2b&quot;,&quot;stolen_base_3b&quot;, &quot;stolen_base_3b&quot;,&quot;stolen_base_home&quot;))) Wild pitches are showing up as a unique events in the data set, when in reality they are just balls thrown extremely away from the strike zone. I’ve changed the wild_pitch values to ball or walk depending on the count it was thrown in. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(count %in% c(&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events ==&quot;wild_pitch&quot;, &quot;ball&quot;, events)) mlbraw_b &lt;- mlbraw_b %&gt;% mutate(events = if_else(events ==&quot;wild_pitch&quot;, &quot;walk&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) %&gt;% arrange(game_year, count, events) rm(mlbraw_a, mlbraw_b) Similarly, foul balls in two strike counts should be labeled foul rather than strike. A strike thrown in a 0-2, 1-2, 2-2, or 3-2 count would actually be a strikeout. So whenever a batter fouls a ball off in a these counts, I’ll given the event a new value: foul. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;,&quot;3-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(!(count %in% c(&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;,&quot;3-2&quot;))) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events == &quot;strike&quot;, &quot;foul&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) rm(mlbraw_a, mlbraw_b) mlbraw &lt;- mlbraw %&gt;% mutate(events=if_else(events==&quot;home_run&quot;,&quot;hr&quot;,events)) I’ll separate the event values as non_outs and outs for future purposes. And check to make sure these are the distinct events values contained in the main data set. non_outs &lt;- c(&quot;ball&quot;,&quot;double&quot;,&quot;hit_by_pitch&quot;,&quot;hr&quot;, &quot;foul&quot;,&quot;single&quot;, &quot;strike&quot;,&quot;triple&quot;,&quot;walk&quot;,&quot;wild_pitch&quot;) outs &lt;- c(&quot;double_play&quot;,&quot;field_out&quot;,&quot;fielders_choice&quot;,&quot;fielders_choice_out&quot;, &quot;force_out&quot;, &quot;grounded_into_double_play&quot;,&quot;fielders_choice_out&quot;, &quot;sac_bunt&quot;,&quot;sac_bunt_double_play&quot;,&quot;sac_fly&quot;,&quot;sac_fly_double_play&quot;, &quot;strikeout&quot;,&quot;strikeout_double_play&quot;,&quot;triple_play&quot;) mlbraw %&gt;% select(events) %&gt;% filter(!(events %in% non_outs)) %&gt;% filter(!(events %in% outs)) # shouldn&#39;t return any records ## # A tibble: 0 × 1 ## # ℹ 1 variable: events &lt;chr&gt; I’ll assign the value out to all the different events resulting in an out rather than using their description. Limiting the possible event values will be essential for the steps going forward. mlbraw &lt;- mlbraw %&gt;% mutate(events = if_else(events %in% outs, &quot;out&quot;, events)) Reorder the factor levels for plotting purposes. mlbraw$events &lt;-factor(mlbraw$events, levels=c(&quot;strike&quot;,&quot;foul&quot;,&quot;ball&quot;,&quot;walk&quot;,&quot;hit_by_pitch&quot;, &quot;out&quot;,&quot;single&quot;,&quot;double&quot;,&quot;triple&quot;,&quot;hr&quot;)) 2.6 Event Outcome Frequency by Count plot4 &lt;- inner_join(mlbraw %&gt;% group_by(count,events) %&gt;% count(), mlbraw %&gt;% group_by(count) %&gt;% count(), join_by(count)) %&gt;% mutate(p = n.x / n.y) %&gt;% select(count, events, p) %&gt;% filter(events != &quot;hit_by_pitch&quot;) ggplot(plot4)+ geom_col(aes(x=events, y=p), fill=&quot;grey&quot;,width=0.9, show.legend = FALSE)+ geom_hline(yintercept=0, linewidth=0.1)+ theme_bw()+ ylim(0, 0.63)+ facet_wrap(~count, ncol=3, nrow=4, scales=&quot;free&quot;)+ ggtitle(&quot;Event Outcome Frequency by Count \\n&quot;)+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), strip.text = element_text(size=20), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, hjust = 1, size=14,color=&quot;grey40&quot;), axis.title = element_blank(), plot.title = element_text(size=20, hjust = 0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) The plot above breaks down the frequency of events in different batter counts, specifically when the events have been narrowed down to 10 values. A pitcher is much more likely to throw a strike in a 3-0 count than a 0-0 count or 0-2 count. And is much more likely to record an out in two-strike counts than no-strike or one-strike counts. Glancing over the plot, the results appear to be what I’d expect which gives some validation to the contents of the data set. 2.7 Average Delta Run Expectancy The purpose of this project is to quantify how good or bad a pitch location is based on the pitch type, count, handedness of the pitch and batter, and of course the location of the pitch on x and y plane. But what metric should be used quantify and formulate the results. The column delta_run_exp exists in the data frame that specifies the value of that individual event in terms of how the run expectancy changed based on that individual event. Every fixed situation in a game has an run expectancy based on where base runners are located prior to the pitch, number of outs prior to the pitch, and the batter count prior to the pitch. Let’s look at an example scenario. An at-bat begins with 0 outs and runners on 1st and 2nd starting in a 0-0 count. In this particular state there is an expected number of runs scored for the remainder of the inning based on those parameters. In 2023, on average 1.465 runs scored in the remainder of the inning for that specific scenario. If the first pitch thrown in the at-bat is a strike, we have a new scenario with a different expected runs scored for the remainder of the inning. Now there are 0 outs with runners on 1st and 2nd in a 0-1 count. And now the average runs scored for the remained of the inning is slightly different than before: 1.376. So the strike thrown by the pitcher changed the expected runs scored by -0.089 and will display that vlaue in the delta_run_exp column. Every pitch in a baseball game can be evaluated by comparing the expected runs prior to the pitch thrown to the expected runs after the pitch is thrown. This appears to be best measure available to apply to my location quality metric using the delta_run_exp value to quality the result of any pitch. The only problem is that delta_run_exp derives it’s value from: count, outs, base runners, and resulting event. In my project I aim to evaluate pitches on different conditions. Really, I am just looking for the average change in run expectancy based on the count and event. So the goal here is to transform the existing data set so rather than relying on delta_run_exp as our metric of success/fail, we create a new variable that gives a change in run expectancy based on the parameters we have set for this project. So when a specific event takes place (ball, strike, double, fielders choice etc.) in a specific count (0-1, 2-0, 3-2 etc.) we have the average change in run expectancy. re_outs &lt;- mlbraw %&gt;% filter(events == &quot;out&quot;) %&gt;% group_by(count, events) %&gt;% summarise(re = round(mean(delta_run_exp, na.rm = TRUE), 4), .groups = &#39;drop&#39;) re_non_outs &lt;- mlbraw %&gt;% filter(events %in% non_outs) %&gt;% group_by(count, events) %&gt;% summarise(re = round(mean(delta_run_exp, na.rm = TRUE), 4), .groups = &#39;drop&#39;) re_lookup &lt;- bind_rows(re_outs, re_non_outs) %&gt;% arrange(count, events) rm(outs, non_outs, re_outs, re_non_outs) Treat every event that resulted in an out as a single out event (regardless of the type of out or how many outs resulted in the play), this is meant to neutralize the affect base runners have on the changing run expectancy as well as the effect of number of outs. I’ve separated outs from non_outs and aggregated to find the average change in run expectancy for every possible event in every possible count. anti_join(mlbraw %&gt;% distinct(count, events), re_lookup %&gt;% distinct(count, events), join_by(count, events)) ## # A tibble: 0 × 2 ## # ℹ 2 variables: count &lt;fct&gt;, events &lt;fct&gt; With the clean mlbraw data set and linear weights look up table, we check to if any combination of count and events from the two data sets are not compatible No combination of count and events exist in one table that is not in the other. Finally, if a pitch resulted in a hit by pitch I’ve decided to treat the event as if it were a ball. And in effect, take the change in run expectancy from ball rather than hit_by_pitch. This leads to more continuity between location plots where rare hit_by_pitch events aren’t strongly influencing certain locations and throwing off the remaining areas. mlbraw_a &lt;- mlbraw %&gt;% filter(count %in% c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;0-2&quot;,&quot;1-2&quot;,&quot;2-2&quot;)) mlbraw_b &lt;- mlbraw %&gt;% filter(count %in% c(&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) mlbraw_a &lt;- mlbraw_a %&gt;% mutate(events = if_else(events == &quot;hit_by_pitch&quot;, &quot;ball&quot;, events)) mlbraw_b &lt;- mlbraw_b %&gt;% mutate(events = if_else(events == &quot;hit_by_pitch&quot;, &quot;walk&quot;, events)) mlbraw &lt;- bind_rows(mlbraw_a, mlbraw_b) %&gt;% arrange(game_year, count, events) rm(mlbraw_a, mlbraw_b) 2.8 Join Lookup Table to Data Set Now I’ll take the main data set with the past 10 years worth of pitches and join the look up table to it, essentially replacing the delta_run_exp values with my new average change in run expectancy values. mlbraw &lt;- mlbraw %&gt;% left_join(re_lookup, join_by(count, events)) %&gt;% select(-delta_run_exp) Here is an overview of how each event in each count impacts run expectancy. We now have a specific change in run expectancy value for every combination of count and events. plot5 &lt;- re_lookup %&gt;% filter(events != &quot;hit_by_pitch&quot;) plot5$events &lt;-factor(plot5$events, levels=c(&quot;out&quot;,&quot;strike&quot;,&quot;foul&quot;,&quot;ball&quot;,&quot;walk&quot;, &quot;single&quot;,&quot;double&quot;,&quot;triple&quot;,&quot;hr&quot;)) ggplot(data = plot5, aes(x=count, y=events, fill=re))+ geom_tile(color = &quot;black&quot;, show.legend = FALSE)+ geom_text(aes(x=count, y=events, label=round(re,2)), color = &quot;black&quot;, size = 4)+ ggtitle(&quot;Average Change in Run Expenctancy Based on Count and Events \\n&quot;)+ scale_fill_gradient2(high=&quot;red&quot;, mid=&quot;white&quot;, low=&quot;blue&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5))+ coord_fixed() As you might expect, event outcomes have slightly different run expectancy changes depending on the count. A home run hit in an 0-2 count has more added run value than a home run hit in a 3-0 count. This is because an 0-2 count is already a more favorable position for the pitcher to be in than a 3-0 count, with the run expectancy starting out lower before the home run is hit. Similarly, an out recorded in an 3-0 count is considerably more favorable to the pitcher than an out recorded in a 0-2 count. This makes logical sense to any baseball enthusiast. Thankfully, when comparing average change in run expectancy values by count we’re not seeing any drastic difference from one grouping to the other. And all the values appear to make a great deal of baseball sense. 2.9 Addressing Pitch Types So far in the cleaning process, we’ve avoided the pitch_type column. Here’s an overview at the pitch types make up a data set containing all pitches thrown the last 10 years in all MLB regular season game. plot6 &lt;- mlbraw %&gt;% group_by(pitch_type, pitch_name) %&gt;% count() %&gt;% arrange(desc(n)) ggplot(plot6, aes(x=n, y=reorder(pitch_name, n)))+ geom_col(fill=&quot;steelblue3&quot;)+ geom_text(aes(label = n), hjust = -0.1, size=4)+ ggtitle(&quot;Count of Observations by Pitch Type \\n&quot;)+ theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.text.y = element_text(hjust=1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,2500000)+ coord_cartesian(expand = FALSE) 4-Seam Fastballs make up a major chunk of the data set. Sinkers, Sliders, Changeups, Curveballs, and cutters are well accounted for but a significant drop off in observations occurs for the remaining pitch types. For now, we will need to transform some of the pitch types. Some of the pitch type values are variations of Curveballs including: Knuckle Curves, Slow Curves, and Slurves. These pitch types do have their own distinct qualities and hand grip, but these are minor variations on the standard Curveball, especially when compared to other pitches. I’ll transform these Curveball variations so they take the standard Curveball pitch type value. Some pitch types are so rare compared to the 6 or so most commonly thrown pitches that for the purpose of this project they can be eliminated going forward. Screwballs, forkballs, euphus’, other will be removed. And Pitch Outs are not considered competitive pitches so they will be removed. Sweepers are a somewhat new pitch type gaining popularity and usage especially within the past year. They are similar to sliders in their movement but tend to have more horizontal break and less vertical break, and tend to have less velocity than sliders. Much debate has been made whether sweepers should be considering their own designated pitch type or as a variation of the slider. For purposes of this project due to the minimal observations, I will transform sweepers into sliders. mlbraw &lt;- mlbraw %&gt;% filter(pitch_type %in% c(&quot;FF&quot;,&quot;CU&quot;,&quot;SL&quot;,&quot;SI&quot;,&quot;CH&quot;,&quot;FS&quot;, &quot;FC&quot;,&quot;KC&quot;,&quot;ST&quot;,&quot;CS&quot;,&quot;SV&quot;)) mlbraw &lt;- mlbraw %&gt;% mutate(pitch_type = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;, &quot;SV&quot;), &quot;CU&quot;, if_else(pitch_type %in% c(&quot;CH&quot;,&quot;FS&quot;), &quot;CH&quot;, if_else(pitch_type %in% c(&quot;SL&quot;,&quot;ST&quot;), &quot;SL&quot;, pitch_type)))) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;CU&quot;, &quot;Curveball&quot;, pitch_name)) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;SL&quot;, &quot;Slider&quot;, pitch_name)) %&gt;% mutate(pitch_name = if_else(pitch_type == &quot;CH&quot;, &quot;Changeup&quot;, pitch_name)) plot7 &lt;- mlbraw %&gt;% group_by(pitch_name) %&gt;% count() %&gt;% ungroup() %&gt;% mutate(s=sum(n)) %&gt;% mutate(p = n/s) ggplot(plot7, aes(x=p, y=reorder(pitch_name, p), label=p))+ geom_col(fill=&quot;steelblue3&quot;)+ geom_text(aes(label = paste(100*round(p,2), &quot;%&quot;, sep=&quot;&quot;)), hjust = 1.1, size=4, color=&quot;white&quot;, fontface=&quot;bold&quot;)+ ggtitle(&quot;Updated Count of Observations by Pitch Type \\n&quot;)+ theme_minimal()+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), axis.text=element_text(size=12), axis.text.x = element_blank(), axis.text.y = element_text(hjust=1), axis.ticks.x = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=20, hjust = 0.5))+ xlim(0,0.38)+ coord_cartesian(expand = FALSE) This leaves me with 6 pitch types to use to build the location quality metric with. 4-Seam Fastballs are much more well represented than the remaining pitch types, so we’ll see how this impacts the results going forward. mlbraw$pitch_type &lt;- factor(mlbraw$pitch_type, levels=c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) plot8 &lt;- inner_join(mlbraw %&gt;% group_by(pitch_type,events) %&gt;%count(), mlbraw %&gt;% group_by(pitch_type) %&gt;% count(), join_by(pitch_type)) %&gt;% mutate(p = n.x / n.y) %&gt;% select(pitch_type, events, p) plot8$pitch_type &lt;- factor(plot8$pitch_type, levels=c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) plot8$events &lt;- factor(plot8$events, levels=c(&quot;strike&quot;,&quot;foul&quot;,&quot;ball&quot;,&quot;walk&quot;,&quot;hit_by_pitch&quot;, &quot;out&quot;,&quot;single&quot;,&quot;double&quot;,&quot;triple&quot;,&quot;hr&quot;)) ggplot(plot8)+ geom_col(aes(x=events, y=p), fill=&quot;grey&quot;)+ ggtitle(&quot;Event Outcome Frequency by Pitch Type \\n&quot;)+ ylim(0, 0.4)+ theme_bw()+ facet_wrap(~pitch_type, ncol=3, nrow=3, scales=&quot;free&quot;)+ theme(strip.background = element_rect(fill = &quot;lightblue&quot;), strip.text = element_text(size=20), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, hjust = 1, size=14,color=&quot;grey40&quot;), axis.title = element_blank(), plot.title = element_text(size=20, hjust = 0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) According to the graph above, event outcomes have generally the same frequency regardless of pitch type. Pitch types like curveballs, sliders, and changeups with more movement and aggressive hand grips are thrown for balls more often than strikes, while variations of fastballs are thrown for strikes more often. 2.10 Cleaning Pitch Locations Next, I’ll bring attention to the location of each pitch. Plate_x will take a value depending on how far away the pitch is horizontally from the center of the plate in feet If a pitch is thrown direction down the middle of the plate, its plate_x value will be 0. Home plate is 1.66 feet wide, so pitches with plate_x values ranging from -0.83 to 0.83 cross some part of the plate. Here is the distribution of plate_x values rounded up as whole number. mlbraw %&gt;% mutate(plate_x = round(plate_x,0)) %&gt;% group_by(plate_x) %&gt;% count() %&gt;% arrange(desc(plate_x)) %&gt;% regulartable() %&gt;% autofit() %&gt;% width(width=1) %&gt;% height(height=0.1) .cl-cf864dba{}.cl-cf829580{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cf8417e8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cf84206c{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf842076{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf842080{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}plate_xn928172665354492312,4922253,45911,631,07902,883,140-11,556,976-2241,665-311,448-4493-545-69-74-82-92-101-111 The plate_x pitch distribution is normal with an extremely high peak at 0. Pitches thrown more than 4 inches to the right or left of the center of the strike zone are extremely rare, so much so that I imagine data entry errors could be the reason for such extreme values. Regardless I’ve chosen to narrow the data set to only include pitches with plate_x values between -4 and 4. mlbraw &lt;- mlbraw %&gt;% filter(plate_x &gt;= -4, plate_x &lt;= 4) Turning attention to plate_z, a similar location distribution exists in the data set. The vast majority of pitches are thrown 2 or 3 feet above the ground (essentially the middle of the strike zone vertically). Pitches more than 6 feet above the ground are quite rare, as well as pitches 2 feet below the ground (bounced on before arriving). I’ll mark these heights as cutoffs and filter out pitches from the data set outside this range. mlbraw %&gt;% mutate(plate_z = round(plate_z,0)) %&gt;% group_by(plate_z) %&gt;% count() %&gt;% arrange(desc(plate_z)) %&gt;% regulartable() %&gt;% autofit() %&gt;% width(j=~plate_z,width=1) %&gt;% width(j=~n,width=1) .cl-cfc49462{}.cl-cfc14a82{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cfc29090{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cfc29dc4{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29dc5{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29dce{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29dcf{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29dec{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29df6{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29df7{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29df8{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29df9{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cfc29e00{width:1in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}plate_zn12111210298821726064,339561,7764542,85632,002,21622,648,27911,102,7900204,405-121,991-21,925-3169-419-53 mlbraw &lt;- mlbraw %&gt;% filter(plate_z &gt;= -2, plate_z &lt;= 6) 2.11 Count of All Observations The challenge moving forward is evaluating the effectiveness of a pitch’s location when some combination of pitch type, count, and handedness is rare in the data set. 4-Seam Fastballs thrown by a RHP to a RHB in a 0-0 count is by far the most common situation making up 240,591 observations of the data set. While Curveballs thrown by LHP to LHB in 3-0 counts produce only 21 observations. How can 21 observations effectively map out pitch location quality? mlbraw &lt;- mlbraw %&gt;% rename(x=plate_x, y=plate_z) %&gt;% select(hand, pitch_type, count, events, x, y, re) plot9 &lt;- mlbraw %&gt;% group_by(hand, count, pitch_type) %&gt;% count() %&gt;% ungroup() ggplot(data = plot9, aes(x=pitch_type, y=count))+ geom_tile(aes(fill=n), alpha = 0.5,show.legend = FALSE)+ facet_wrap(~hand, scale=&quot;free&quot;)+ geom_text(aes(x=pitch_type, y=count, label=n))+ scale_fill_gradientn(colours = c(&quot;blue&quot;,&quot;white&quot;,&quot;red&quot;), values = scales::rescale(c(min(plot9$n), quantile(plot9$n, 0.1), max(plot9$n))), guide=&quot;colorbar&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5)) To work around this challenge, I’ve decided to essentially double the data set. All pitches thrown by RHP to RHB will also include all pitches thrown by LHP to LHB with hand label LvL changed to RvR. The added data will have opposite plate_x values. So a pitch thrown by LHP to LHB with a plate_x of 1 and plate_z of 4 will be added as a pitch thrown by RHP to RHB with a plate_x of -1 and plate_z of 4. This mutation of data doubles the number of observations in the main data set. mlbraw_r_r &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;RvR&quot;), mlbraw %&gt;% filter(hand == &quot;LvL&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;RvR&quot;)) mlbraw_l_l &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;LvL&quot;), mlbraw %&gt;% filter(hand == &quot;RvR&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;LvL&quot;)) mlbraw_r_l &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;RvL&quot;), mlbraw %&gt;% filter(hand == &quot;LvR&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;RvL&quot;)) mlbraw_l_r &lt;- bind_rows(mlbraw %&gt;% filter(hand == &quot;LvR&quot;), mlbraw %&gt;% filter(hand == &quot;RvL&quot;) %&gt;% mutate(x = x*-1) %&gt;% mutate(hand = &quot;LvR&quot;)) mlbraw2 &lt;- bind_rows(mlbraw_r_r, mlbraw_l_l, mlbraw_r_l, mlbraw_l_r) rm(mlbraw_r_r, mlbraw_l_l, mlbraw_r_l, mlbraw_l_r, mlbraw) The same heatmap now shows double the number of observations for each combination of handedness, pitch type, and count. Some combinations still have low number of observations but it’s an improvement over the previous data set before doubling up. plot10 &lt;- mlbraw2 %&gt;% group_by(hand, count, pitch_type) %&gt;% count() %&gt;% ungroup() ggplot(data = plot10, aes(x=pitch_type, y=count))+ geom_tile(aes(fill=n), alpha = 0.5,show.legend = FALSE)+ facet_wrap(~hand, scale=&quot;free&quot;)+ geom_text(aes(x=pitch_type, y=count, label=n))+ scale_fill_gradientn(colours = c(&quot;blue&quot;,&quot;white&quot;,&quot;red&quot;), values = scales::rescale(c(min(plot10$n), quantile(plot10$n, 0.1), max(plot10$n))), guide=&quot;colorbar&quot;) + theme_void()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1), axis.text.y = element_text(size = 12, hjust = 0.9), plot.title = element_text(size=20, hjust = 0.5)) "],["example-model.html", "Chapter 3 Example Model 3.1 Scatterplot of Example Data 3.2 Scatterplot of Example Data Filtered 3.3 Create Grid 3.4 Apply Game Results to Grid", " Chapter 3 Example Model 3.1 Scatterplot of Example Data Now I’ll highlight a specific pitch type thrown in a specific count by a specific combination of batter/pitcher handedness. This plot accounts for all recorded sliders thrown by RHP to RHB in 2-2 counts. The red rectangle signifies the strikezone for reference. count_df &lt;- mlbraw2 %&gt;% filter(count == &quot;2-2&quot;) hand_pitch_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, pitch_type == &quot;SL&quot;) hand_pitch_count_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, pitch_type == &quot;SL&quot;, count == &quot;2-2&quot;) hand_count_df &lt;- mlbraw2 %&gt;% filter(hand == &quot;RvR&quot;, count == &quot;2-2&quot;) n &lt;- hand_pitch_count_df %&gt;% count() %&gt;% as_vector() if (n &gt; 20000) { hand_pitch_count_df &lt;- hand_pitch_count_df %&gt;% slice_sample(n=20000) } else { hand_pitch_count_df } rm(n) ggplot() + geom_point(data = hand_pitch_count_df, aes(x,y), size = 0.1, alpha=0.2, show.legend = TRUE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ xlim(-4,5)+ ylim(-3,6.5)+ coord_fixed() This plot accounts for all 50,909 recorded sliders thrown by RHP to RHB in 2-2 counts from 2014-2023. The blue rectangle represents the strike zone for reference. The goal here is to use these location points along with run expectancy change associated with the event outcome to tell us where the best and worst possible pitch locations are for pitches thrown under these conditions. A challenge presenting itself here is that clearly these pitches are concentrated in certain regions. An oval shape forms centered in the bottom right corner of the strike zone and the further it expands outward the less observations there are. In some areas of this plot the observations are so infrequent that attempting to model a smooth doesn’t work. So instead of using the whole region to fit a model, we can limit the region to just areas in a higher concentration of observations eliminating pitch outlier regions. 3.2 Scatterplot of Example Data Filtered Here is the same plot, but eliminating the top 1% outlier points. g &lt;- expand.grid(x = seq(-4, 4, 0.01), y = seq(-2, 6, 0.01)) %&gt;% mutate(x=round(x,2), y=round(y,2)) %&gt;% as_tibble() gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) gfa &lt;- gf %&gt;% augment() gfa99 &lt;- gfa %&gt;% filter(.hat &lt;= quantile(gfa$.hat, 0.99)) %&gt;% select(x, y) hand_pitch_count_df_lim &lt;- hand_pitch_count_df %&gt;% semi_join(gfa99, join_by(x,y)) ggplot() + geom_point(data = hand_pitch_count_df_lim, aes(x,y), size = 0.1, alpha=0.2, show.legend =TRUE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ xlim(-4,5)+ ylim(-3,6.5)+ coord_fixed() 3.3 Create Grid A grid region can be created based on the location of these pitches excluding outlier points. This grid represents the region where 99% of all sliders thrown by RHP to RHB are located. aa &lt;- gfa99 %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() aa &lt;- gg %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() ggplot() + geom_point(data = gg, aes(x = x, y = y), color=&quot;black&quot;, alpha=0.1, size = 0.000001, show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() 3.4 Apply Game Results to Grid Next I’ll use the GAM function to estimate the change in run expectancy based on pitch location. The resulting plot shows a smooth of optimal and sub-optimal pitch locations for these unique pitch parameters, with best locations appearing bright yellow and worst locations appearing dark blue. As you can see, pitches around the edges of the strike zone rate highest, particularly the low and outside corner where a slider moving away from hitter is generally viewed as an effective location. The further away pitches are from the edge of the strike zone, the less effective they become, as it becomes easier for hitters to recognize an easy take. I would like to note that the a transformation has been made to the output average run expectancy value. The range of these values differ greatly depending on the count a pitch is thrown in. Pitches in 0-0 counts have considerably less extreme run expectancy values compared to 3-2 counts. In order to effectively evaluate the quality of a pitch location and keep the scale consistent regardless of the count a pitch is thrown in, I’ve normalized the output values to be take on a value ranging from 0 to 1. gf1 &lt;- gam(re ~ s(x, y), data = hand_pitch_count_df, method = &quot;REML&quot;) gg$lp &lt;- predict(gf1, gg, type = &quot;response&quot;) gg &lt;- gg %&gt;% mutate(pq = (lp - min(lp)) / (max(lp) - min(lp))) ggplot() + geom_tile(data = gg, aes(x = x, y = y, fill = pq), show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.50, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.5, colour = &quot;red&quot;) + scale_fill_viridis_c(direction = -1, limits = c(0,1)) + ggtitle(&quot;RvR SL 2-2&quot;) + theme_bw() + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 20), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() rm(re_lookup,count_df, hand_count_df, hand_pitch_count_df, hand_pitch_count_df_lim, hand_pitch_df, aa, bb, cc, dd, ee, ff, g, gf, gf1, gfa, gfa99, gg) "],["functions.html", "Chapter 4 Functions 4.1 Function 1 4.2 Function 2 4.3 Function 3", " Chapter 4 Functions These functions essentially repeat the previous steps from the example model, but allow us to repeat the process for all combinations of handedness, pitch type, and count. The parameters can be inputted into the functions to give us a resulting data frame and plot to visualize for each unique combination of handedness, count, and pitch type. 4.1 Function 1 function_p_type_hand_ptiles &lt;- function(df, hand, pitch_type) { hand = enquo(hand) pitch_type = enquo(pitch_type) hand_pitch_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type) gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) } 4.2 Function 2 location_quality &lt;- function(df, hand, pitch_type, count, gf) { hand = enquo(hand) pitch_type = enquo(pitch_type) count = enquo(count) count_df &lt;- df %&gt;% filter(UQ(count) == count) hand_pitch_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type) hand_pitch_count_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(pitch_type) == pitch_type, UQ(count) == count) hand_count_df &lt;- df %&gt;% filter(UQ(hand) == hand, UQ(count) == count) n &lt;- hand_pitch_count_df %&gt;% count() %&gt;% as_vector() if (n &gt; 20000) { hand_pitch_count_df &lt;- hand_pitch_count_df %&gt;% slice_sample(n=20000) } else { hand_pitch_count_df } g &lt;- expand.grid(x = seq(-4, 4, 0.01), y = seq(-2, 6, 0.01)) %&gt;% mutate(x=round(x,2), y=round(y,2)) %&gt;% as_tibble() #gf &lt;- gam(re ~ s(x, y), data = hand_pitch_df) gfa &lt;- gf %&gt;% augment() gfa99 &lt;- gfa %&gt;% filter(.hat &lt;= quantile(gfa$.hat, 0.99)) %&gt;% select(x, y) aa &lt;- gfa99 %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() aa &lt;- gg %&gt;% group_by(x) %&gt;% summarise(ymin=min(y), ymax=max(y)) bb &lt;- inner_join(g,aa, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% select(-y) %&gt;% distinct() cc &lt;- g %&gt;% left_join(bb, join_by(x==x, y&gt;=ymin, y&lt;=ymax)) %&gt;% filter(!is.na(ymin), !is.na(ymax)) %&gt;% select(x,y) dd &lt;- cc %&gt;% group_by(y) %&gt;% summarise(xmin=min(x), xmax=max(x)) ee &lt;- inner_join(g,dd, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% select(-x) %&gt;% distinct() ff &lt;- g %&gt;% left_join(ee, join_by(y==y, x&gt;=xmin, x&lt;=xmax)) %&gt;% filter(!is.na(xmin), !is.na(xmax)) %&gt;% select(x,y) gg &lt;- bind_rows(cc,ff) %&gt;% distinct() gf1 &lt;- gam(re ~ s(x, y), data = hand_pitch_count_df, method = &quot;REML&quot;) gg$lp &lt;- predict(gf1, gg, type = &quot;response&quot;) gg &lt;- gg %&gt;% mutate(hand = unique(hand_pitch_count_df$hand), pitch_type = unique(hand_pitch_count_df$pitch_type), count = unique(hand_pitch_count_df$count)) %&gt;% select(hand, pitch_type, count, x, y, lp) gg &lt;- gg %&gt;% mutate(pq = (lp - min(lp)) / (max(lp) - min(lp))) %&gt;% select(-lp) %&gt;% mutate(pq = 1-pq) return(gg) } 4.3 Function 3 location_quality_plot &lt;- function(df) { hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) df &lt;- df %&gt;% inner_join(hand, join_by(hand==hand_id)) %&gt;% select(-hand) %&gt;% rename(hand=hand.y) %&gt;% inner_join(pitch_type, join_by(pitch_type==pitch_type_id)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type.y) %&gt;% inner_join(count, join_by(count==count_id)) %&gt;% select(-count) %&gt;% rename(count=count.y) rm(hand, pitch_type, count) df &lt;- df %&gt;% mutate(label = paste(hand, pitch_type, count, sep = &quot; &quot;)) ggplot() + geom_tile(data= df, aes(x,y, fill = pq), show.legend = FALSE) + geom_rect(aes(ymax = 3.50, ymin = 1.5, xmax = 0.83, xmin = -0.83), alpha = 0, linewidth=0.1, colour = &quot;red&quot;) + ggtitle(unique(df$label)) + theme_bw() + scale_fill_viridis_c(direction = 1, limits = c(0,1)) + theme(axis.title = element_blank(), plot.title = element_text(hjust = 0.5, size = 12), panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ coord_fixed() } "],["applying-functions.html", "Chapter 5 Applying Functions 5.1 Create Data Frames 5.2 Create Plots", " Chapter 5 Applying Functions There are 288 unique combinations of handedness, pitch type, and count. Each combination will get its own GAM smooth. Running this code takes considerable processing time, so to speed up the process I’ll convert the category values of the mlbraw2 data frame to integers with indexed values. Then after the computations are complete, I’ll convert the integer values back to the original categorical values. The result of all this computation will be 288 data frames each with every possible combination of x and y value from its grid plot. For example, the grid region representing 99% of all sliders thrown RHP to RHB will have every possible combination of x and y value in it. Along with x and y values with its corresponding change in run expectancy as visualized before. All 288 data frames will be compiled together into a single data frame to be used to join to a season’s worth of data. 5.1 Create Data Frames hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) events &lt;- tibble(events_id = c(1,2,3,4,5,6,7,8,9) , events = c(&quot;ball&quot;,&quot;double&quot;,&quot;hr&quot;,&quot;out&quot;,&quot;single&quot;,&quot;strike&quot;,&quot;triple&quot;,&quot;foul&quot;,&quot;walk&quot;)) mlbraw2 &lt;- mlbraw2 %&gt;% inner_join(hand, join_by(hand)) %&gt;% select(-hand) %&gt;% rename(hand=hand_id) %&gt;% inner_join(pitch_type, join_by(pitch_type)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type_id) %&gt;% inner_join(count, join_by(count)) %&gt;% select(-count) %&gt;% rename(count=count_id) %&gt;% inner_join(events, join_by(events)) %&gt;% select(-events) %&gt;% rename(events=events_id) mlbraw2$hand &lt;- as.integer(as.factor(mlbraw2$hand)) mlbraw2$pitch_type &lt;- as.integer(as.factor(mlbraw2$pitch_type)) mlbraw2$count &lt;- as.integer(as.factor(mlbraw2$count)) mlbraw2$events &lt;- as.integer(as.factor(mlbraw2$events)) rm(hand, pitch_type, count, events) gf_r_r_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 1) # &quot;RvR&quot;, &quot;SI&quot; gf_r_r_si &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 2) # &quot;RvR&quot;, &quot;SI&quot; gf_r_r_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 3) # &quot;RvR&quot;, &quot;FC&quot; gf_r_r_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 4) # &quot;RvR&quot;, &quot;CH&quot; gf_r_r_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 5) # &quot;RvR&quot;, &quot;CU&quot; gf_r_r_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 1, 6) # &quot;RvR&quot;, &quot;SL&quot; gf_r_l_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 1) # &quot;RvL&quot;, &quot;FF&quot; gf_r_l_si &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 2) # &quot;RvL&quot;, &quot;SI&quot; gf_r_l_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 3) # &quot;RvL&quot;, &quot;FC&quot; gf_r_l_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 4) # &quot;RvL&quot;, &quot;CH&quot; gf_r_l_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 5) # &quot;RvL&quot;, &quot;CU&quot; gf_r_l_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 2, 6) # &quot;RvL&quot;, &quot;SL&quot; gf_l_l_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 1) # &quot;LvL&quot;, &quot;FF&quot; gf_l_l_si &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 2) # &quot;LvL&quot;, &quot;SI&quot; gf_l_l_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 3) # &quot;LvL&quot;, &quot;FC&quot; gf_l_l_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 4) # &quot;LvL&quot;, &quot;CH&quot; gf_l_l_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 5) # &quot;LvL&quot;, &quot;CU&quot; gf_l_l_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 3, 6) # &quot;LvL&quot;, &quot;SL&quot; gf_l_r_ff &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 1) # &quot;LvR&quot;, &quot;FF&quot;) gf_l_r_si &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 2) # &quot;LvR&quot;, &quot;SI&quot;) gf_l_r_fc &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 3) # &quot;LvR&quot;, &quot;FC&quot;) gf_l_r_ch &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 4) # &quot;LvR&quot;, &quot;CH&quot;) gf_l_r_cu &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 5) # &quot;LvR&quot;, &quot;CU&quot;) gf_l_r_sl &lt;- function_p_type_hand_ptiles(mlbraw2, 4, 6) # &quot;LvR&quot;, &quot;SL&quot;) r_r_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 1, gf = gf_r_r_ff) r_r_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 2, gf = gf_r_r_ff) r_r_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 3, gf = gf_r_r_ff) r_r_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 4, gf = gf_r_r_ff) r_r_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 5, gf = gf_r_r_ff) r_r_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 6, gf = gf_r_r_ff) r_r_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 7, gf = gf_r_r_ff) r_r_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 8, gf = gf_r_r_ff) r_r_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 9, gf = gf_r_r_ff) r_r_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 10, gf = gf_r_r_ff) r_r_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 11, gf = gf_r_r_ff) r_r_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 1, count = 12, gf = gf_r_r_ff) r_r_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 1, gf = gf_r_r_si) r_r_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 2, gf = gf_r_r_si) r_r_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 3, gf = gf_r_r_si) r_r_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 4, gf = gf_r_r_si) r_r_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 5, gf = gf_r_r_si) r_r_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 6, gf = gf_r_r_si) r_r_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 7, gf = gf_r_r_si) r_r_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 8, gf = gf_r_r_si) r_r_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 9, gf = gf_r_r_si) r_r_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 10, gf = gf_r_r_si) r_r_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 11, gf = gf_r_r_si) r_r_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 2, count = 12, gf = gf_r_r_si) r_r_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 1, gf = gf_r_r_fc) r_r_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 2, gf = gf_r_r_fc) r_r_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 3, gf = gf_r_r_fc) r_r_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 4, gf = gf_r_r_fc) r_r_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 5, gf = gf_r_r_fc) r_r_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 6, gf = gf_r_r_fc) r_r_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 7, gf = gf_r_r_fc) r_r_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 8, gf = gf_r_r_fc) r_r_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 9, gf = gf_r_r_fc) r_r_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 10, gf = gf_r_r_fc) r_r_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 11, gf = gf_r_r_fc) r_r_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 3, count = 12, gf = gf_r_r_fc) r_r_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 1, gf = gf_r_r_ch) r_r_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 2, gf = gf_r_r_ch) r_r_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 3, gf = gf_r_r_ch) r_r_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 4, gf = gf_r_r_ch) r_r_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 5, gf = gf_r_r_ch) r_r_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 6, gf = gf_r_r_ch) r_r_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 7, gf = gf_r_r_ch) r_r_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 8, gf = gf_r_r_ch) r_r_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 9, gf = gf_r_r_ch) r_r_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 10, gf = gf_r_r_ch) r_r_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 11, gf = gf_r_r_ch) r_r_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 4, count = 12, gf = gf_r_r_ch) r_r_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 1, gf = gf_r_r_sl) r_r_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 2, gf = gf_r_r_sl) r_r_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 3, gf = gf_r_r_sl) r_r_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 4, gf = gf_r_r_sl) r_r_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 5, gf = gf_r_r_sl) r_r_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 6, gf = gf_r_r_sl) r_r_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 7, gf = gf_r_r_sl) r_r_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 8, gf = gf_r_r_sl) r_r_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 9, gf = gf_r_r_sl) r_r_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 10, gf = gf_r_r_sl) r_r_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 11, gf = gf_r_r_sl) r_r_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 6, count = 12, gf = gf_r_r_sl) r_r_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 1, gf = gf_r_r_cu) r_r_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 2, gf = gf_r_r_cu) r_r_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 3, gf = gf_r_r_cu) r_r_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 4, gf = gf_r_r_cu) r_r_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 5, gf = gf_r_r_cu) r_r_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 6, gf = gf_r_r_cu) r_r_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 7, gf = gf_r_r_cu) r_r_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 8, gf = gf_r_r_cu) r_r_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 9, gf = gf_r_r_cu) r_r_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 10, gf = gf_r_r_cu) r_r_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 11, gf = gf_r_r_cu) r_r_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 1, pitch_type = 5, count = 12, gf = gf_r_r_cu) r_l_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 1, gf = gf_r_l_ff) r_l_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 2, gf = gf_r_l_ff) r_l_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 3, gf = gf_r_l_ff) r_l_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 4, gf = gf_r_l_ff) r_l_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 5, gf = gf_r_l_ff) r_l_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 6, gf = gf_r_l_ff) r_l_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 7, gf = gf_r_l_ff) r_l_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 8, gf = gf_r_l_ff) r_l_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 9, gf = gf_r_l_ff) r_l_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 10, gf = gf_r_l_ff) r_l_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 11, gf = gf_r_l_ff) r_l_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 1, count = 12, gf = gf_r_l_ff) r_l_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 1, gf = gf_r_l_si) r_l_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 2, gf = gf_r_l_si) r_l_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 3, gf = gf_r_l_si) r_l_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 4, gf = gf_r_l_si) r_l_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 5, gf = gf_r_l_si) r_l_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 6, gf = gf_r_l_si) r_l_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 7, gf = gf_r_l_si) r_l_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 8, gf = gf_r_l_si) r_l_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 9, gf = gf_r_l_si) r_l_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 10, gf = gf_r_l_si) r_l_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 11, gf = gf_r_l_si) r_l_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 2, count = 12, gf = gf_r_l_si) r_l_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 1, gf = gf_r_l_fc) r_l_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 2, gf = gf_r_l_fc) r_l_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 3, gf = gf_r_l_fc) r_l_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 4, gf = gf_r_l_fc) r_l_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 5, gf = gf_r_l_fc) r_l_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 6, gf = gf_r_l_fc) r_l_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 7, gf = gf_r_l_fc) r_l_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 8, gf = gf_r_l_fc) r_l_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 9, gf = gf_r_l_fc) r_l_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 10, gf = gf_r_l_fc) r_l_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 11, gf = gf_r_l_fc) r_l_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 3, count = 12, gf = gf_r_l_fc) r_l_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 1, gf = gf_r_l_ch) r_l_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 2, gf = gf_r_l_ch) r_l_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 3, gf = gf_r_l_ch) r_l_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 4, gf = gf_r_l_ch) r_l_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 5, gf = gf_r_l_ch) r_l_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 6, gf = gf_r_l_ch) r_l_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 7, gf = gf_r_l_ch) r_l_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 8, gf = gf_r_l_ch) r_l_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 9, gf = gf_r_l_ch) r_l_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 10, gf = gf_r_l_ch) r_l_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 11, gf = gf_r_l_ch) r_l_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 4, count = 12, gf = gf_r_l_ch) r_l_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 1, gf = gf_r_l_sl) r_l_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 2, gf = gf_r_l_sl) r_l_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 3, gf = gf_r_l_sl) r_l_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 4, gf = gf_r_l_sl) r_l_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 5, gf = gf_r_l_sl) r_l_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 6, gf = gf_r_l_sl) r_l_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 7, gf = gf_r_l_sl) r_l_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 8, gf = gf_r_l_sl) r_l_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 9, gf = gf_r_l_sl) r_l_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 10, gf = gf_r_l_sl) r_l_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 11, gf = gf_r_l_sl) r_l_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 6, count = 12, gf = gf_r_l_sl) r_l_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 1, gf = gf_r_l_cu) r_l_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 2, gf = gf_r_l_cu) r_l_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 3, gf = gf_r_l_cu) r_l_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 4, gf = gf_r_l_cu) r_l_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 5, gf = gf_r_l_cu) r_l_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 6, gf = gf_r_l_cu) r_l_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 7, gf = gf_r_l_cu) r_l_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 8, gf = gf_r_l_cu) r_l_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 9, gf = gf_r_l_cu) r_l_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 10, gf = gf_r_l_cu) r_l_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 11, gf = gf_r_l_cu) r_l_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 2, pitch_type = 5, count = 12, gf = gf_r_l_cu) l_l_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 1, gf = gf_l_l_ff) l_l_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 2, gf = gf_l_l_ff) l_l_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 3, gf = gf_l_l_ff) l_l_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 4, gf = gf_l_l_ff) l_l_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 5, gf = gf_l_l_ff) l_l_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 6, gf = gf_l_l_ff) l_l_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 7, gf = gf_l_l_ff) l_l_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 8, gf = gf_l_l_ff) l_l_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 9, gf = gf_l_l_ff) l_l_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 10, gf = gf_l_l_ff) l_l_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 11, gf = gf_l_l_ff) l_l_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 1, count = 12, gf = gf_l_l_ff) l_l_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 1, gf = gf_l_l_si) l_l_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 2, gf = gf_l_l_si) l_l_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 3, gf = gf_l_l_si) l_l_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 4, gf = gf_l_l_si) l_l_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 5, gf = gf_l_l_si) l_l_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 6, gf = gf_l_l_si) l_l_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 7, gf = gf_l_l_si) l_l_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 8, gf = gf_l_l_si) l_l_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 9, gf = gf_l_l_si) l_l_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 10, gf = gf_l_l_si) l_l_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 11, gf = gf_l_l_si) l_l_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 2, count = 12, gf = gf_l_l_si) l_l_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 1, gf = gf_l_l_fc) l_l_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 2, gf = gf_l_l_fc) l_l_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 3, gf = gf_l_l_fc) l_l_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 4, gf = gf_l_l_fc) l_l_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 5, gf = gf_l_l_fc) l_l_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 6, gf = gf_l_l_fc) l_l_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 7, gf = gf_l_l_fc) l_l_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 8, gf = gf_l_l_fc) l_l_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 9, gf = gf_l_l_fc) l_l_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 10, gf = gf_l_l_fc) l_l_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 11, gf = gf_l_l_fc) l_l_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 3, count = 12, gf = gf_l_l_fc) l_l_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 1, gf = gf_l_l_ch) l_l_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 2, gf = gf_l_l_ch) l_l_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 3, gf = gf_l_l_ch) l_l_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 4, gf = gf_l_l_ch) l_l_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 5, gf = gf_l_l_ch) l_l_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 6, gf = gf_l_l_ch) l_l_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 7, gf = gf_l_l_ch) l_l_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 8, gf = gf_l_l_ch) l_l_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 9, gf = gf_l_l_ch) l_l_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 10, gf = gf_l_l_ch) l_l_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 11, gf = gf_l_l_ch) l_l_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 4, count = 12, gf = gf_l_l_ch) l_l_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 1, gf = gf_l_l_sl) l_l_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 2, gf = gf_l_l_sl) l_l_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 3, gf = gf_l_l_sl) l_l_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 4, gf = gf_l_l_sl) l_l_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 5, gf = gf_l_l_sl) l_l_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 6, gf = gf_l_l_sl) l_l_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 7, gf = gf_l_l_sl) l_l_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 8, gf = gf_l_l_sl) l_l_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 9, gf = gf_l_l_sl) l_l_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 10, gf = gf_l_l_sl) l_l_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 11, gf = gf_l_l_sl) l_l_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 6, count = 12, gf = gf_l_l_sl) l_l_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 1, gf = gf_l_l_cu) l_l_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 2, gf = gf_l_l_cu) l_l_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 3, gf = gf_l_l_cu) l_l_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 4, gf = gf_l_l_cu) l_l_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 5, gf = gf_l_l_cu) l_l_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 6, gf = gf_l_l_cu) l_l_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 7, gf = gf_l_l_cu) l_l_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 8, gf = gf_l_l_cu) l_l_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 9, gf = gf_l_l_cu) l_l_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 10, gf = gf_l_l_cu) l_l_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 11, gf = gf_l_l_cu) l_l_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 3, pitch_type = 5, count = 12, gf = gf_l_l_cu) l_r_ff_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 1, gf = gf_l_r_ff) l_r_ff_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 2, gf = gf_l_r_ff) l_r_ff_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 3, gf = gf_l_r_ff) l_r_ff_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 4, gf = gf_l_r_ff) l_r_ff_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 5, gf = gf_l_r_ff) l_r_ff_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 6, gf = gf_l_r_ff) l_r_ff_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 7, gf = gf_l_r_ff) l_r_ff_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 8, gf = gf_l_r_ff) l_r_ff_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 9, gf = gf_l_r_ff) l_r_ff_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 10, gf = gf_l_r_ff) l_r_ff_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 11, gf = gf_l_r_ff) l_r_ff_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 1, count = 12, gf = gf_l_r_ff) l_r_si_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 1, gf = gf_l_r_si) l_r_si_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 2, gf = gf_l_r_si) l_r_si_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 3, gf = gf_l_r_si) l_r_si_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 4, gf = gf_l_r_si) l_r_si_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 5, gf = gf_l_r_si) l_r_si_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 6, gf = gf_l_r_si) l_r_si_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 7, gf = gf_l_r_si) l_r_si_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 8, gf = gf_l_r_si) l_r_si_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 9, gf = gf_l_r_si) l_r_si_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 10, gf = gf_l_r_si) l_r_si_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 11, gf = gf_l_r_si) l_r_si_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 2, count = 12, gf = gf_l_r_si) l_r_fc_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 1, gf = gf_l_r_fc) l_r_fc_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 2, gf = gf_l_r_fc) l_r_fc_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 3, gf = gf_l_r_fc) l_r_fc_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 4, gf = gf_l_r_fc) l_r_fc_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 5, gf = gf_l_r_fc) l_r_fc_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 6, gf = gf_l_r_fc) l_r_fc_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 7, gf = gf_l_r_fc) l_r_fc_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 8, gf = gf_l_r_fc) l_r_fc_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 9, gf = gf_l_r_fc) l_r_fc_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 10, gf = gf_l_r_fc) l_r_fc_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 11, gf = gf_l_r_fc) l_r_fc_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 3, count = 12, gf = gf_l_r_fc) l_r_ch_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 1, gf = gf_l_r_ch) l_r_ch_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 2, gf = gf_l_r_ch) l_r_ch_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 3, gf = gf_l_r_ch) l_r_ch_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 4, gf = gf_l_r_ch) l_r_ch_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 5, gf = gf_l_r_ch) l_r_ch_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 6, gf = gf_l_r_ch) l_r_ch_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 7, gf = gf_l_r_ch) l_r_ch_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 8, gf = gf_l_r_ch) l_r_ch_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 9, gf = gf_l_r_ch) l_r_ch_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 10, gf = gf_l_r_ch) l_r_ch_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 11, gf = gf_l_r_ch) l_r_ch_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 4, count = 12, gf = gf_l_r_ch) l_r_sl_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 1, gf = gf_l_r_sl) l_r_sl_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 2, gf = gf_l_r_sl) l_r_sl_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 3, gf = gf_l_r_sl) l_r_sl_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 4, gf = gf_l_r_sl) l_r_sl_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 5, gf = gf_l_r_sl) l_r_sl_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 6, gf = gf_l_r_sl) l_r_sl_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 7, gf = gf_l_r_sl) l_r_sl_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 8, gf = gf_l_r_sl) l_r_sl_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 9, gf = gf_l_r_sl) l_r_sl_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 10, gf = gf_l_r_sl) l_r_sl_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 11, gf = gf_l_r_sl) l_r_sl_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 6, count = 12, gf = gf_l_r_sl) l_r_cu_0_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 1, gf = gf_l_r_cu) l_r_cu_0_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 2, gf = gf_l_r_cu) l_r_cu_0_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 3, gf = gf_l_r_cu) l_r_cu_1_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 4, gf = gf_l_r_cu) l_r_cu_1_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 5, gf = gf_l_r_cu) l_r_cu_1_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 6, gf = gf_l_r_cu) l_r_cu_2_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 7, gf = gf_l_r_cu) l_r_cu_2_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 8, gf = gf_l_r_cu) l_r_cu_2_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 9, gf = gf_l_r_cu) l_r_cu_3_0 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 10, gf = gf_l_r_cu) l_r_cu_3_1 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 11, gf = gf_l_r_cu) l_r_cu_3_2 &lt;- location_quality(df = mlbraw2, hand = 4, pitch_type = 5, count = 12, gf = gf_l_r_cu) 5.2 Create Plots plot_r_r_ff_0_0 &lt;- location_quality_plot(r_r_ff_0_0) plot_r_r_ff_0_1 &lt;- location_quality_plot(r_r_ff_0_1) plot_r_r_ff_0_2 &lt;- location_quality_plot(r_r_ff_0_2) plot_r_r_ff_1_0 &lt;- location_quality_plot(r_r_ff_1_0) plot_r_r_ff_1_1 &lt;- location_quality_plot(r_r_ff_1_1) plot_r_r_ff_1_2 &lt;- location_quality_plot(r_r_ff_1_2) plot_r_r_ff_2_0 &lt;- location_quality_plot(r_r_ff_2_0) plot_r_r_ff_2_1 &lt;- location_quality_plot(r_r_ff_2_1) plot_r_r_ff_2_2 &lt;- location_quality_plot(r_r_ff_2_2) plot_r_r_ff_3_0 &lt;- location_quality_plot(r_r_ff_3_0) plot_r_r_ff_3_1 &lt;- location_quality_plot(r_r_ff_3_1) plot_r_r_ff_3_2 &lt;- location_quality_plot(r_r_ff_3_2) plot_r_r_si_0_0 &lt;- location_quality_plot(r_r_si_0_0) plot_r_r_si_0_1 &lt;- location_quality_plot(r_r_si_0_1) plot_r_r_si_0_2 &lt;- location_quality_plot(r_r_si_0_2) plot_r_r_si_1_0 &lt;- location_quality_plot(r_r_si_1_0) plot_r_r_si_1_1 &lt;- location_quality_plot(r_r_si_1_1) plot_r_r_si_1_2 &lt;- location_quality_plot(r_r_si_1_2) plot_r_r_si_2_0 &lt;- location_quality_plot(r_r_si_2_0) plot_r_r_si_2_1 &lt;- location_quality_plot(r_r_si_2_1) plot_r_r_si_2_2 &lt;- location_quality_plot(r_r_si_2_2) plot_r_r_si_3_0 &lt;- location_quality_plot(r_r_si_3_0) plot_r_r_si_3_1 &lt;- location_quality_plot(r_r_si_3_1) plot_r_r_si_3_2 &lt;- location_quality_plot(r_r_si_3_2) plot_r_r_fc_0_0 &lt;- location_quality_plot(r_r_fc_0_0) plot_r_r_fc_0_1 &lt;- location_quality_plot(r_r_fc_0_1) plot_r_r_fc_0_2 &lt;- location_quality_plot(r_r_fc_0_2) plot_r_r_fc_1_0 &lt;- location_quality_plot(r_r_fc_1_0) plot_r_r_fc_1_1 &lt;- location_quality_plot(r_r_fc_1_1) plot_r_r_fc_1_2 &lt;- location_quality_plot(r_r_fc_1_2) plot_r_r_fc_2_0 &lt;- location_quality_plot(r_r_fc_2_0) plot_r_r_fc_2_1 &lt;- location_quality_plot(r_r_fc_2_1) plot_r_r_fc_2_2 &lt;- location_quality_plot(r_r_fc_2_2) plot_r_r_fc_3_0 &lt;- location_quality_plot(r_r_fc_3_0) plot_r_r_fc_3_1 &lt;- location_quality_plot(r_r_fc_3_1) plot_r_r_fc_3_2 &lt;- location_quality_plot(r_r_fc_3_2) plot_r_r_ch_0_0 &lt;- location_quality_plot(r_r_ch_0_0) plot_r_r_ch_0_1 &lt;- location_quality_plot(r_r_ch_0_1) plot_r_r_ch_0_2 &lt;- location_quality_plot(r_r_ch_0_2) plot_r_r_ch_1_0 &lt;- location_quality_plot(r_r_ch_1_0) plot_r_r_ch_1_1 &lt;- location_quality_plot(r_r_ch_1_1) plot_r_r_ch_1_2 &lt;- location_quality_plot(r_r_ch_1_2) plot_r_r_ch_2_0 &lt;- location_quality_plot(r_r_ch_2_0) plot_r_r_ch_2_1 &lt;- location_quality_plot(r_r_ch_2_1) plot_r_r_ch_2_2 &lt;- location_quality_plot(r_r_ch_2_2) plot_r_r_ch_3_0 &lt;- location_quality_plot(r_r_ch_3_0) plot_r_r_ch_3_1 &lt;- location_quality_plot(r_r_ch_3_1) plot_r_r_ch_3_2 &lt;- location_quality_plot(r_r_ch_3_2) plot_r_r_sl_0_0 &lt;- location_quality_plot(r_r_sl_0_0) plot_r_r_sl_0_1 &lt;- location_quality_plot(r_r_sl_0_1) plot_r_r_sl_0_2 &lt;- location_quality_plot(r_r_sl_0_2) plot_r_r_sl_1_0 &lt;- location_quality_plot(r_r_sl_1_0) plot_r_r_sl_1_1 &lt;- location_quality_plot(r_r_sl_1_1) plot_r_r_sl_1_2 &lt;- location_quality_plot(r_r_sl_1_2) plot_r_r_sl_2_0 &lt;- location_quality_plot(r_r_sl_2_0) plot_r_r_sl_2_1 &lt;- location_quality_plot(r_r_sl_2_1) plot_r_r_sl_2_2 &lt;- location_quality_plot(r_r_sl_2_2) plot_r_r_sl_3_0 &lt;- location_quality_plot(r_r_sl_3_0) plot_r_r_sl_3_1 &lt;- location_quality_plot(r_r_sl_3_1) plot_r_r_sl_3_2 &lt;- location_quality_plot(r_r_sl_3_2) plot_r_r_cu_0_0 &lt;- location_quality_plot(r_r_cu_0_0) plot_r_r_cu_0_1 &lt;- location_quality_plot(r_r_cu_0_1) plot_r_r_cu_0_2 &lt;- location_quality_plot(r_r_cu_0_2) plot_r_r_cu_1_0 &lt;- location_quality_plot(r_r_cu_1_0) plot_r_r_cu_1_1 &lt;- location_quality_plot(r_r_cu_1_1) plot_r_r_cu_1_2 &lt;- location_quality_plot(r_r_cu_1_2) plot_r_r_cu_2_0 &lt;- location_quality_plot(r_r_cu_2_0) plot_r_r_cu_2_1 &lt;- location_quality_plot(r_r_cu_2_1) plot_r_r_cu_2_2 &lt;- location_quality_plot(r_r_cu_2_2) plot_r_r_cu_3_0 &lt;- location_quality_plot(r_r_cu_3_0) plot_r_r_cu_3_1 &lt;- location_quality_plot(r_r_cu_3_1) plot_r_r_cu_3_2 &lt;- location_quality_plot(r_r_cu_3_2) plot_r_l_ff_0_0 &lt;- location_quality_plot(r_l_ff_0_0) plot_r_l_ff_0_1 &lt;- location_quality_plot(r_l_ff_0_1) plot_r_l_ff_0_2 &lt;- location_quality_plot(r_l_ff_0_2) plot_r_l_ff_1_0 &lt;- location_quality_plot(r_l_ff_1_0) plot_r_l_ff_1_1 &lt;- location_quality_plot(r_l_ff_1_1) plot_r_l_ff_1_2 &lt;- location_quality_plot(r_l_ff_1_2) plot_r_l_ff_2_0 &lt;- location_quality_plot(r_l_ff_2_0) plot_r_l_ff_2_1 &lt;- location_quality_plot(r_l_ff_2_1) plot_r_l_ff_2_2 &lt;- location_quality_plot(r_l_ff_2_2) plot_r_l_ff_3_0 &lt;- location_quality_plot(r_l_ff_3_0) plot_r_l_ff_3_1 &lt;- location_quality_plot(r_l_ff_3_1) plot_r_l_ff_3_2 &lt;- location_quality_plot(r_l_ff_3_2) plot_r_l_si_0_0 &lt;- location_quality_plot(r_l_si_0_0) plot_r_l_si_0_1 &lt;- location_quality_plot(r_l_si_0_1) plot_r_l_si_0_2 &lt;- location_quality_plot(r_l_si_0_2) plot_r_l_si_1_0 &lt;- location_quality_plot(r_l_si_1_0) plot_r_l_si_1_1 &lt;- location_quality_plot(r_l_si_1_1) plot_r_l_si_1_2 &lt;- location_quality_plot(r_l_si_1_2) plot_r_l_si_2_0 &lt;- location_quality_plot(r_l_si_2_0) plot_r_l_si_2_1 &lt;- location_quality_plot(r_l_si_2_1) plot_r_l_si_2_2 &lt;- location_quality_plot(r_l_si_2_2) plot_r_l_si_3_0 &lt;- location_quality_plot(r_l_si_3_0) plot_r_l_si_3_1 &lt;- location_quality_plot(r_l_si_3_1) plot_r_l_si_3_2 &lt;- location_quality_plot(r_l_si_3_2) plot_r_l_fc_0_0 &lt;- location_quality_plot(r_l_fc_0_0) plot_r_l_fc_0_1 &lt;- location_quality_plot(r_l_fc_0_1) plot_r_l_fc_0_2 &lt;- location_quality_plot(r_l_fc_0_2) plot_r_l_fc_1_0 &lt;- location_quality_plot(r_l_fc_1_0) plot_r_l_fc_1_1 &lt;- location_quality_plot(r_l_fc_1_1) plot_r_l_fc_1_2 &lt;- location_quality_plot(r_l_fc_1_2) plot_r_l_fc_2_0 &lt;- location_quality_plot(r_l_fc_2_0) plot_r_l_fc_2_1 &lt;- location_quality_plot(r_l_fc_2_1) plot_r_l_fc_2_2 &lt;- location_quality_plot(r_l_fc_2_2) plot_r_l_fc_3_0 &lt;- location_quality_plot(r_l_fc_3_0) plot_r_l_fc_3_1 &lt;- location_quality_plot(r_l_fc_3_1) plot_r_l_fc_3_2 &lt;- location_quality_plot(r_l_fc_3_2) plot_r_l_ch_0_0 &lt;- location_quality_plot(r_l_ch_0_0) plot_r_l_ch_0_1 &lt;- location_quality_plot(r_l_ch_0_1) plot_r_l_ch_0_2 &lt;- location_quality_plot(r_l_ch_0_2) plot_r_l_ch_1_0 &lt;- location_quality_plot(r_l_ch_1_0) plot_r_l_ch_1_1 &lt;- location_quality_plot(r_l_ch_1_1) plot_r_l_ch_1_2 &lt;- location_quality_plot(r_l_ch_1_2) plot_r_l_ch_2_0 &lt;- location_quality_plot(r_l_ch_2_0) plot_r_l_ch_2_1 &lt;- location_quality_plot(r_l_ch_2_1) plot_r_l_ch_2_2 &lt;- location_quality_plot(r_l_ch_2_2) plot_r_l_ch_3_0 &lt;- location_quality_plot(r_l_ch_3_0) plot_r_l_ch_3_1 &lt;- location_quality_plot(r_l_ch_3_1) plot_r_l_ch_3_2 &lt;- location_quality_plot(r_l_ch_3_2) plot_r_l_sl_0_0 &lt;- location_quality_plot(r_l_sl_0_0) plot_r_l_sl_0_1 &lt;- location_quality_plot(r_l_sl_0_1) plot_r_l_sl_0_2 &lt;- location_quality_plot(r_l_sl_0_2) plot_r_l_sl_1_0 &lt;- location_quality_plot(r_l_sl_1_0) plot_r_l_sl_1_1 &lt;- location_quality_plot(r_l_sl_1_1) plot_r_l_sl_1_2 &lt;- location_quality_plot(r_l_sl_1_2) plot_r_l_sl_2_0 &lt;- location_quality_plot(r_l_sl_2_0) plot_r_l_sl_2_1 &lt;- location_quality_plot(r_l_sl_2_1) plot_r_l_sl_2_2 &lt;- location_quality_plot(r_l_sl_2_2) plot_r_l_sl_3_0 &lt;- location_quality_plot(r_l_sl_3_0) plot_r_l_sl_3_1 &lt;- location_quality_plot(r_l_sl_3_1) plot_r_l_sl_3_2 &lt;- location_quality_plot(r_l_sl_3_2) plot_r_l_cu_0_0 &lt;- location_quality_plot(r_l_cu_0_0) plot_r_l_cu_0_1 &lt;- location_quality_plot(r_l_cu_0_1) plot_r_l_cu_0_2 &lt;- location_quality_plot(r_l_cu_0_2) plot_r_l_cu_1_0 &lt;- location_quality_plot(r_l_cu_1_0) plot_r_l_cu_1_1 &lt;- location_quality_plot(r_l_cu_1_1) plot_r_l_cu_1_2 &lt;- location_quality_plot(r_l_cu_1_2) plot_r_l_cu_2_0 &lt;- location_quality_plot(r_l_cu_2_0) plot_r_l_cu_2_1 &lt;- location_quality_plot(r_l_cu_2_1) plot_r_l_cu_2_2 &lt;- location_quality_plot(r_l_cu_2_2) plot_r_l_cu_3_0 &lt;- location_quality_plot(r_l_cu_3_0) plot_r_l_cu_3_1 &lt;- location_quality_plot(r_l_cu_3_1) plot_r_l_cu_3_2 &lt;- location_quality_plot(r_l_cu_3_2) plot_l_l_ff_0_0 &lt;- location_quality_plot(l_l_ff_0_0) plot_l_l_ff_0_1 &lt;- location_quality_plot(l_l_ff_0_1) plot_l_l_ff_0_2 &lt;- location_quality_plot(l_l_ff_0_2) plot_l_l_ff_1_0 &lt;- location_quality_plot(l_l_ff_1_0) plot_l_l_ff_1_1 &lt;- location_quality_plot(l_l_ff_1_1) plot_l_l_ff_1_2 &lt;- location_quality_plot(l_l_ff_1_2) plot_l_l_ff_2_0 &lt;- location_quality_plot(l_l_ff_2_0) plot_l_l_ff_2_1 &lt;- location_quality_plot(l_l_ff_2_1) plot_l_l_ff_2_2 &lt;- location_quality_plot(l_l_ff_2_2) plot_l_l_ff_3_0 &lt;- location_quality_plot(l_l_ff_3_0) plot_l_l_ff_3_1 &lt;- location_quality_plot(l_l_ff_3_1) plot_l_l_ff_3_2 &lt;- location_quality_plot(l_l_ff_3_2) plot_l_l_si_0_0 &lt;- location_quality_plot(l_l_si_0_0) plot_l_l_si_0_1 &lt;- location_quality_plot(l_l_si_0_1) plot_l_l_si_0_2 &lt;- location_quality_plot(l_l_si_0_2) plot_l_l_si_1_0 &lt;- location_quality_plot(l_l_si_1_0) plot_l_l_si_1_1 &lt;- location_quality_plot(l_l_si_1_1) plot_l_l_si_1_2 &lt;- location_quality_plot(l_l_si_1_2) plot_l_l_si_2_0 &lt;- location_quality_plot(l_l_si_2_0) plot_l_l_si_2_1 &lt;- location_quality_plot(l_l_si_2_1) plot_l_l_si_2_2 &lt;- location_quality_plot(l_l_si_2_2) plot_l_l_si_3_0 &lt;- location_quality_plot(l_l_si_3_0) plot_l_l_si_3_1 &lt;- location_quality_plot(l_l_si_3_1) plot_l_l_si_3_2 &lt;- location_quality_plot(l_l_si_3_2) plot_l_l_fc_0_0 &lt;- location_quality_plot(l_l_fc_0_0) plot_l_l_fc_0_1 &lt;- location_quality_plot(l_l_fc_0_1) plot_l_l_fc_0_2 &lt;- location_quality_plot(l_l_fc_0_2) plot_l_l_fc_1_0 &lt;- location_quality_plot(l_l_fc_1_0) plot_l_l_fc_1_1 &lt;- location_quality_plot(l_l_fc_1_1) plot_l_l_fc_1_2 &lt;- location_quality_plot(l_l_fc_1_2) plot_l_l_fc_2_0 &lt;- location_quality_plot(l_l_fc_2_0) plot_l_l_fc_2_1 &lt;- location_quality_plot(l_l_fc_2_1) plot_l_l_fc_2_2 &lt;- location_quality_plot(l_l_fc_2_2) plot_l_l_fc_3_0 &lt;- location_quality_plot(l_l_fc_3_0) plot_l_l_fc_3_1 &lt;- location_quality_plot(l_l_fc_3_1) plot_l_l_fc_3_2 &lt;- location_quality_plot(l_l_fc_3_2) plot_l_l_ch_0_0 &lt;- location_quality_plot(l_l_ch_0_0) plot_l_l_ch_0_1 &lt;- location_quality_plot(l_l_ch_0_1) plot_l_l_ch_0_2 &lt;- location_quality_plot(l_l_ch_0_2) plot_l_l_ch_1_0 &lt;- location_quality_plot(l_l_ch_1_0) plot_l_l_ch_1_1 &lt;- location_quality_plot(l_l_ch_1_1) plot_l_l_ch_1_2 &lt;- location_quality_plot(l_l_ch_1_2) plot_l_l_ch_2_0 &lt;- location_quality_plot(l_l_ch_2_0) plot_l_l_ch_2_1 &lt;- location_quality_plot(l_l_ch_2_1) plot_l_l_ch_2_2 &lt;- location_quality_plot(l_l_ch_2_2) plot_l_l_ch_3_0 &lt;- location_quality_plot(l_l_ch_3_0) plot_l_l_ch_3_1 &lt;- location_quality_plot(l_l_ch_3_1) plot_l_l_ch_3_2 &lt;- location_quality_plot(l_l_ch_3_2) plot_l_l_sl_0_0 &lt;- location_quality_plot(l_l_sl_0_0) plot_l_l_sl_0_1 &lt;- location_quality_plot(l_l_sl_0_1) plot_l_l_sl_0_2 &lt;- location_quality_plot(l_l_sl_0_2) plot_l_l_sl_1_0 &lt;- location_quality_plot(l_l_sl_1_0) plot_l_l_sl_1_1 &lt;- location_quality_plot(l_l_sl_1_1) plot_l_l_sl_1_2 &lt;- location_quality_plot(l_l_sl_1_2) plot_l_l_sl_2_0 &lt;- location_quality_plot(l_l_sl_2_0) plot_l_l_sl_2_1 &lt;- location_quality_plot(l_l_sl_2_1) plot_l_l_sl_2_2 &lt;- location_quality_plot(l_l_sl_2_2) plot_l_l_sl_3_0 &lt;- location_quality_plot(l_l_sl_3_0) plot_l_l_sl_3_1 &lt;- location_quality_plot(l_l_sl_3_1) plot_l_l_sl_3_2 &lt;- location_quality_plot(l_l_sl_3_2) plot_l_l_cu_0_0 &lt;- location_quality_plot(l_l_cu_0_0) plot_l_l_cu_0_1 &lt;- location_quality_plot(l_l_cu_0_1) plot_l_l_cu_0_2 &lt;- location_quality_plot(l_l_cu_0_2) plot_l_l_cu_1_0 &lt;- location_quality_plot(l_l_cu_1_0) plot_l_l_cu_1_1 &lt;- location_quality_plot(l_l_cu_1_1) plot_l_l_cu_1_2 &lt;- location_quality_plot(l_l_cu_1_2) plot_l_l_cu_2_0 &lt;- location_quality_plot(l_l_cu_2_0) plot_l_l_cu_2_1 &lt;- location_quality_plot(l_l_cu_2_1) plot_l_l_cu_2_2 &lt;- location_quality_plot(l_l_cu_2_2) plot_l_l_cu_3_0 &lt;- location_quality_plot(l_l_cu_3_0) plot_l_l_cu_3_1 &lt;- location_quality_plot(l_l_cu_3_1) plot_l_l_cu_3_2 &lt;- location_quality_plot(l_l_cu_3_2) plot_l_r_ff_0_0 &lt;- location_quality_plot(l_r_ff_0_0) plot_l_r_ff_0_1 &lt;- location_quality_plot(l_r_ff_0_1) plot_l_r_ff_0_2 &lt;- location_quality_plot(l_r_ff_0_2) plot_l_r_ff_1_0 &lt;- location_quality_plot(l_r_ff_1_0) plot_l_r_ff_1_1 &lt;- location_quality_plot(l_r_ff_1_1) plot_l_r_ff_1_2 &lt;- location_quality_plot(l_r_ff_1_2) plot_l_r_ff_2_0 &lt;- location_quality_plot(l_r_ff_2_0) plot_l_r_ff_2_1 &lt;- location_quality_plot(l_r_ff_2_1) plot_l_r_ff_2_2 &lt;- location_quality_plot(l_r_ff_2_2) plot_l_r_ff_3_0 &lt;- location_quality_plot(l_r_ff_3_0) plot_l_r_ff_3_1 &lt;- location_quality_plot(l_r_ff_3_1) plot_l_r_ff_3_2 &lt;- location_quality_plot(l_r_ff_3_2) plot_l_r_si_0_0 &lt;- location_quality_plot(l_r_si_0_0) plot_l_r_si_0_1 &lt;- location_quality_plot(l_r_si_0_1) plot_l_r_si_0_2 &lt;- location_quality_plot(l_r_si_0_2) plot_l_r_si_1_0 &lt;- location_quality_plot(l_r_si_1_0) plot_l_r_si_1_1 &lt;- location_quality_plot(l_r_si_1_1) plot_l_r_si_1_2 &lt;- location_quality_plot(l_r_si_1_2) plot_l_r_si_2_0 &lt;- location_quality_plot(l_r_si_2_0) plot_l_r_si_2_1 &lt;- location_quality_plot(l_r_si_2_1) plot_l_r_si_2_2 &lt;- location_quality_plot(l_r_si_2_2) plot_l_r_si_3_0 &lt;- location_quality_plot(l_r_si_3_0) plot_l_r_si_3_1 &lt;- location_quality_plot(l_r_si_3_1) plot_l_r_si_3_2 &lt;- location_quality_plot(l_r_si_3_2) plot_l_r_fc_0_0 &lt;- location_quality_plot(l_r_fc_0_0) plot_l_r_fc_0_1 &lt;- location_quality_plot(l_r_fc_0_1) plot_l_r_fc_0_2 &lt;- location_quality_plot(l_r_fc_0_2) plot_l_r_fc_1_0 &lt;- location_quality_plot(l_r_fc_1_0) plot_l_r_fc_1_1 &lt;- location_quality_plot(l_r_fc_1_1) plot_l_r_fc_1_2 &lt;- location_quality_plot(l_r_fc_1_2) plot_l_r_fc_2_0 &lt;- location_quality_plot(l_r_fc_2_0) plot_l_r_fc_2_1 &lt;- location_quality_plot(l_r_fc_2_1) plot_l_r_fc_2_2 &lt;- location_quality_plot(l_r_fc_2_2) plot_l_r_fc_3_0 &lt;- location_quality_plot(l_r_fc_3_0) plot_l_r_fc_3_1 &lt;- location_quality_plot(l_r_fc_3_1) plot_l_r_fc_3_2 &lt;- location_quality_plot(l_r_fc_3_2) plot_l_r_ch_0_0 &lt;- location_quality_plot(l_r_ch_0_0) plot_l_r_ch_0_1 &lt;- location_quality_plot(l_r_ch_0_1) plot_l_r_ch_0_2 &lt;- location_quality_plot(l_r_ch_0_2) plot_l_r_ch_1_0 &lt;- location_quality_plot(l_r_ch_1_0) plot_l_r_ch_1_1 &lt;- location_quality_plot(l_r_ch_1_1) plot_l_r_ch_1_2 &lt;- location_quality_plot(l_r_ch_1_2) plot_l_r_ch_2_0 &lt;- location_quality_plot(l_r_ch_2_0) plot_l_r_ch_2_1 &lt;- location_quality_plot(l_r_ch_2_1) plot_l_r_ch_2_2 &lt;- location_quality_plot(l_r_ch_2_2) plot_l_r_ch_3_0 &lt;- location_quality_plot(l_r_ch_3_0) plot_l_r_ch_3_1 &lt;- location_quality_plot(l_r_ch_3_1) plot_l_r_ch_3_2 &lt;- location_quality_plot(l_r_ch_3_2) plot_l_r_sl_0_0 &lt;- location_quality_plot(l_r_sl_0_0) plot_l_r_sl_0_1 &lt;- location_quality_plot(l_r_sl_0_1) plot_l_r_sl_0_2 &lt;- location_quality_plot(l_r_sl_0_2) plot_l_r_sl_1_0 &lt;- location_quality_plot(l_r_sl_1_0) plot_l_r_sl_1_1 &lt;- location_quality_plot(l_r_sl_1_1) plot_l_r_sl_1_2 &lt;- location_quality_plot(l_r_sl_1_2) plot_l_r_sl_2_0 &lt;- location_quality_plot(l_r_sl_2_0) plot_l_r_sl_2_1 &lt;- location_quality_plot(l_r_sl_2_1) plot_l_r_sl_2_2 &lt;- location_quality_plot(l_r_sl_2_2) plot_l_r_sl_3_0 &lt;- location_quality_plot(l_r_sl_3_0) plot_l_r_sl_3_1 &lt;- location_quality_plot(l_r_sl_3_1) plot_l_r_sl_3_2 &lt;- location_quality_plot(l_r_sl_3_2) plot_l_r_cu_0_0 &lt;- location_quality_plot(l_r_cu_0_0) plot_l_r_cu_0_1 &lt;- location_quality_plot(l_r_cu_0_1) plot_l_r_cu_0_2 &lt;- location_quality_plot(l_r_cu_0_2) plot_l_r_cu_1_0 &lt;- location_quality_plot(l_r_cu_1_0) plot_l_r_cu_1_1 &lt;- location_quality_plot(l_r_cu_1_1) plot_l_r_cu_1_2 &lt;- location_quality_plot(l_r_cu_1_2) plot_l_r_cu_2_0 &lt;- location_quality_plot(l_r_cu_2_0) plot_l_r_cu_2_1 &lt;- location_quality_plot(l_r_cu_2_1) plot_l_r_cu_2_2 &lt;- location_quality_plot(l_r_cu_2_2) plot_l_r_cu_3_0 &lt;- location_quality_plot(l_r_cu_3_0) plot_l_r_cu_3_1 &lt;- location_quality_plot(l_r_cu_3_1) plot_l_r_cu_3_2 &lt;- location_quality_plot(l_r_cu_3_2) r_r_ff &lt;- ggarrange(plot_r_r_ff_0_0,plot_r_r_ff_1_0,plot_r_r_ff_2_0,plot_r_r_ff_3_0, plot_r_r_ff_0_1,plot_r_r_ff_1_1,plot_r_r_ff_2_1,plot_r_r_ff_3_1, plot_r_r_ff_0_2,plot_r_r_ff_1_2,plot_r_r_ff_2_2,plot_r_r_ff_3_2, nrow=3, ncol=4) r_r_si &lt;- ggarrange(plot_r_r_si_0_0,plot_r_r_si_1_0,plot_r_r_si_2_0,plot_r_r_si_3_0, plot_r_r_si_0_1,plot_r_r_si_1_1,plot_r_r_si_2_1,plot_r_r_si_3_1, plot_r_r_si_0_2,plot_r_r_si_1_2,plot_r_r_si_2_2,plot_r_r_si_3_2, nrow=3, ncol=4) r_r_fc &lt;- ggarrange(plot_r_r_fc_0_0,plot_r_r_fc_1_0,plot_r_r_fc_2_0,plot_r_r_fc_3_0, plot_r_r_fc_0_1,plot_r_r_fc_1_1,plot_r_r_fc_2_1,plot_r_r_fc_3_1, plot_r_r_fc_0_2,plot_r_r_fc_1_2,plot_r_r_fc_2_2,plot_r_r_fc_3_2, nrow=3, ncol=4) r_r_ch &lt;- ggarrange(plot_r_r_ch_0_0,plot_r_r_ch_1_0,plot_r_r_ch_2_0,plot_r_r_ch_3_0, plot_r_r_ch_0_1,plot_r_r_ch_1_1,plot_r_r_ch_2_1,plot_r_r_ch_3_1, plot_r_r_ch_0_2,plot_r_r_ch_1_2,plot_r_r_ch_2_2,plot_r_r_ch_3_2, nrow=3, ncol=4) r_r_cu &lt;- ggarrange(plot_r_r_cu_0_0,plot_r_r_cu_1_0,plot_r_r_cu_2_0,plot_r_r_cu_3_0, plot_r_r_cu_0_1,plot_r_r_cu_1_1,plot_r_r_cu_2_1,plot_r_r_cu_3_1, plot_r_r_cu_0_2,plot_r_r_cu_1_2,plot_r_r_cu_2_2,plot_r_r_cu_3_2, nrow=3, ncol=4) r_r_sl &lt;- ggarrange(plot_r_r_sl_0_0,plot_r_r_sl_1_0,plot_r_r_sl_2_0,plot_r_r_sl_3_0, plot_r_r_sl_0_1,plot_r_r_sl_1_1,plot_r_r_sl_2_1,plot_r_r_sl_3_1, plot_r_r_sl_0_2,plot_r_r_sl_1_2,plot_r_r_sl_2_2,plot_r_r_sl_3_2, nrow=3, ncol=4) r_l_ff &lt;- ggarrange(plot_r_l_ff_0_0,plot_r_l_ff_1_0,plot_r_l_ff_2_0,plot_r_l_ff_3_0, plot_r_l_ff_0_1,plot_r_l_ff_1_1,plot_r_l_ff_2_1,plot_r_l_ff_3_1, plot_r_l_ff_0_2,plot_r_l_ff_1_2,plot_r_l_ff_2_2,plot_r_l_ff_3_2, nrow=3, ncol=4) r_l_si &lt;- ggarrange(plot_r_l_si_0_0,plot_r_l_si_1_0,plot_r_l_si_2_0,plot_r_l_si_3_0, plot_r_l_si_0_1,plot_r_l_si_1_1,plot_r_l_si_2_1,plot_r_l_si_3_1, plot_r_l_si_0_2,plot_r_l_si_1_2,plot_r_l_si_2_2,plot_r_l_si_3_2, nrow=3, ncol=4) r_l_fc &lt;- ggarrange(plot_r_l_fc_0_0,plot_r_l_fc_1_0,plot_r_l_fc_2_0,plot_r_l_fc_3_0, plot_r_l_fc_0_1,plot_r_l_fc_1_1,plot_r_l_fc_2_1,plot_r_l_fc_3_1, plot_r_l_fc_0_2,plot_r_l_fc_1_2,plot_r_l_fc_2_2,plot_r_l_fc_3_2, nrow=3, ncol=4) r_l_ch &lt;- ggarrange(plot_r_l_ch_0_0,plot_r_l_ch_1_0,plot_r_l_ch_2_0,plot_r_l_ch_3_0, plot_r_l_ch_0_1,plot_r_l_ch_1_1,plot_r_l_ch_2_1,plot_r_l_ch_3_1, plot_r_l_ch_0_2,plot_r_l_ch_1_2,plot_r_l_ch_2_2,plot_r_l_ch_3_2, nrow=3, ncol=4) r_l_cu &lt;- ggarrange(plot_r_l_cu_0_0,plot_r_l_cu_1_0,plot_r_l_cu_2_0,plot_r_l_cu_3_0, plot_r_l_cu_0_1,plot_r_l_cu_1_1,plot_r_l_cu_2_1,plot_r_l_cu_3_1, plot_r_l_cu_0_2,plot_r_l_cu_1_2,plot_r_l_cu_2_2,plot_r_l_cu_3_2, nrow=3, ncol=4) r_l_sl &lt;- ggarrange(plot_r_l_sl_0_0,plot_r_l_sl_1_0,plot_r_l_sl_2_0,plot_r_l_sl_3_0, plot_r_l_sl_0_1,plot_r_l_sl_1_1,plot_r_l_sl_2_1,plot_r_l_sl_3_1, plot_r_l_sl_0_2,plot_r_l_sl_1_2,plot_r_l_sl_2_2,plot_r_l_sl_3_2, nrow=3, ncol=4) l_l_ff &lt;- ggarrange(plot_l_l_ff_0_0,plot_l_l_ff_1_0,plot_l_l_ff_2_0,plot_l_l_ff_3_0, plot_l_l_ff_0_1,plot_l_l_ff_1_1,plot_l_l_ff_2_1,plot_l_l_ff_3_1, plot_l_l_ff_0_2,plot_l_l_ff_1_2,plot_l_l_ff_2_2,plot_l_l_ff_3_2, nrow=3, ncol=4) l_l_si &lt;- ggarrange(plot_l_l_si_0_0,plot_l_l_si_1_0,plot_l_l_si_2_0,plot_l_l_si_3_0, plot_l_l_si_0_1,plot_l_l_si_1_1,plot_l_l_si_2_1,plot_l_l_si_3_1, plot_l_l_si_0_2,plot_l_l_si_1_2,plot_l_l_si_2_2,plot_l_l_si_3_2, nrow=3, ncol=4) l_l_fc &lt;- ggarrange(plot_l_l_fc_0_0,plot_l_l_fc_1_0,plot_l_l_fc_2_0,plot_l_l_fc_3_0, plot_l_l_fc_0_1,plot_l_l_fc_1_1,plot_l_l_fc_2_1,plot_l_l_fc_3_1, plot_l_l_fc_0_2,plot_l_l_fc_1_2,plot_l_l_fc_2_2,plot_l_l_fc_3_2, nrow=3, ncol=4) l_l_ch &lt;- ggarrange(plot_l_l_ch_0_0,plot_l_l_ch_1_0,plot_l_l_ch_2_0,plot_l_l_ch_3_0, plot_l_l_ch_0_1,plot_l_l_ch_1_1,plot_l_l_ch_2_1,plot_l_l_ch_3_1, plot_l_l_ch_0_2,plot_l_l_ch_1_2,plot_l_l_ch_2_2,plot_l_l_ch_3_2, nrow=3, ncol=4) l_l_cu &lt;- ggarrange(plot_l_l_cu_0_0,plot_l_l_cu_1_0,plot_l_l_cu_2_0,plot_l_l_cu_3_0, plot_l_l_cu_0_1,plot_l_l_cu_1_1,plot_l_l_cu_2_1,plot_l_l_cu_3_1, plot_l_l_cu_0_2,plot_l_l_cu_1_2,plot_l_l_cu_2_2,plot_l_l_cu_3_2, nrow=3, ncol=4) l_l_sl &lt;- ggarrange(plot_l_l_sl_0_0,plot_l_l_sl_1_0,plot_l_l_sl_2_0,plot_l_l_sl_3_0, plot_l_l_sl_0_1,plot_l_l_sl_1_1,plot_l_l_sl_2_1,plot_l_l_sl_3_1, plot_l_l_sl_0_2,plot_l_l_sl_1_2,plot_l_l_sl_2_2,plot_l_l_sl_3_2, nrow=3, ncol=4) l_r_ff &lt;- ggarrange(plot_l_r_ff_0_0,plot_l_r_ff_1_0,plot_l_r_ff_2_0,plot_l_r_ff_3_0, plot_l_r_ff_0_1,plot_l_r_ff_1_1,plot_l_r_ff_2_1,plot_l_r_ff_3_1, plot_l_r_ff_0_2,plot_l_r_ff_1_2,plot_l_r_ff_2_2,plot_l_r_ff_3_2, nrow=3, ncol=4) l_r_si &lt;- ggarrange(plot_l_r_si_0_0,plot_l_r_si_1_0,plot_l_r_si_2_0,plot_l_r_si_3_0, plot_l_r_si_0_1,plot_l_r_si_1_1,plot_l_r_si_2_1,plot_l_r_si_3_1, plot_l_r_si_0_2,plot_l_r_si_1_2,plot_l_r_si_2_2,plot_l_r_si_3_2, nrow=3, ncol=4) l_r_fc &lt;- ggarrange(plot_l_r_fc_0_0,plot_l_r_fc_1_0,plot_l_r_fc_2_0,plot_l_r_fc_3_0, plot_l_r_fc_0_1,plot_l_r_fc_1_1,plot_l_r_fc_2_1,plot_l_r_fc_3_1, plot_l_r_fc_0_2,plot_l_r_fc_1_2,plot_l_r_fc_2_2,plot_l_r_fc_3_2, nrow=3, ncol=4) l_r_ch &lt;- ggarrange(plot_l_r_ch_0_0,plot_l_r_ch_1_0,plot_l_r_ch_2_0,plot_l_r_ch_3_0, plot_l_r_ch_0_1,plot_l_r_ch_1_1,plot_l_r_ch_2_1,plot_l_r_ch_3_1, plot_l_r_ch_0_2,plot_l_r_ch_1_2,plot_l_r_ch_2_2,plot_l_r_ch_3_2, nrow=3, ncol=4) l_r_cu &lt;- ggarrange(plot_l_r_cu_0_0,plot_l_r_cu_1_0,plot_l_r_cu_2_0,plot_l_r_cu_3_0, plot_l_r_cu_0_1,plot_l_r_cu_1_1,plot_l_r_cu_2_1,plot_l_r_cu_3_1, plot_l_r_cu_0_2,plot_l_r_cu_1_2,plot_l_r_cu_2_2,plot_l_r_cu_3_2, nrow=3, ncol=4) l_r_sl &lt;- ggarrange(plot_l_r_sl_0_0,plot_l_r_sl_1_0,plot_l_r_sl_2_0,plot_l_r_sl_3_0, plot_l_r_sl_0_1,plot_l_r_sl_1_1,plot_l_r_sl_2_1,plot_l_r_sl_3_1, plot_l_r_sl_0_2,plot_l_r_sl_1_2,plot_l_r_sl_2_2,plot_l_r_sl_3_2, nrow=3, ncol=4) "],["visualizing-resulting-plots.html", "Chapter 6 Visualizing Resulting Plots 6.1 Plot Outputs 6.2 Compile Results into 1 Lookup Table", " Chapter 6 Visualizing Resulting Plots 6.1 Plot Outputs Here’s the resulting plots for every unique combination of handedness, pitch type, and count. I would like to note that the output values (change in run expectancy) have a considerably different range of values depending on the count the pitch is thrown in. For example, pitches in 0-0 counts have less leverage than pitches in 3-2 counts. Here is a breakdown of the events and their associated change in run expectancy in 0-0 counts compared to 3-2 counts. As a result of this, the GAM smooth will have differing range of expected values depending on the count. This presents an issue in attempting to create a pitch location quality metric. If I were to analyze a season’s worth of pitches for a particular pitcher, their pitches thrown in high leverage counts would completely dwarf those in low leverage counts. And an aggregation like average pitch location quality would be influenced much more by some counts over others. Instead I’ll normalize the output values of each plot transforming the values to be between a range of 0 to 1. This way pitches from different unique situations can be evaluated the same. r_r_ff r_r_si r_r_fc r_r_ch r_r_cu r_r_sl r_l_ff r_l_si r_l_fc r_l_ch r_l_cu r_l_sl l_l_ff l_l_si l_l_fc l_l_ch l_l_cu l_l_sl l_r_ff l_r_si l_r_fc l_r_ch l_r_cu l_r_sl 6.2 Compile Results into 1 Lookup Table hand &lt;- tibble(hand_id = c(1,2,3,4), hand = c(&quot;RvR&quot;,&quot;RvL&quot;,&quot;LvL&quot;,&quot;LvR&quot;)) pitch_type &lt;- tibble(pitch_type_id = c(1,2,3,4,5,6), pitch_type = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;)) count &lt;- tibble(count_id = c(1,2,3,4,5,6,7,8,9,10,11,12), count = c(&quot;0-0&quot;,&quot;0-1&quot;,&quot;0-2&quot;,&quot;1-0&quot;,&quot;1-1&quot;,&quot;1-2&quot;,&quot;2-0&quot;,&quot;2-1&quot;,&quot;2-2&quot;,&quot;3-0&quot;,&quot;3-1&quot;,&quot;3-2&quot;)) huge_lookup &lt;- huge_lookup %&gt;% inner_join(hand, join_by(hand==hand_id)) %&gt;% select(-hand) %&gt;% rename(hand=hand.y) %&gt;% inner_join(pitch_type, join_by(pitch_type==pitch_type_id)) %&gt;% select(-pitch_type) %&gt;% rename(pitch_type=pitch_type.y) %&gt;% inner_join(count, join_by(count==count_id)) %&gt;% select(-count) %&gt;% rename(count=count.y) %&gt;% select(hand, pitch_type, count, x, y, pq) rm(hand, pitch_type, count) "],["applying-results-to-2023-season.html", "Chapter 7 Applying Results to 2023 Season 7.1 Cleaning 2023 Dataset 7.2 Location Quality by Pitch Type 7.3 Location Quality by Count 7.4 Final Cleaning", " Chapter 7 Applying Results to 2023 Season Now we have a compiled pitch quality data frame that can be joined to a season’s worth of data. So any given pitch from 2023 will have a corresponding pitch location value. However, outlier pitches falling outside the 99% region will not have a corresponding pitch value. For the time being, these pitches are removed from the analysis going forward. Here, I’ll load 2023 season data back in and do some cleaning before joining the pitch quality lookup data frame to it. 7.1 Cleaning 2023 Dataset mlbraw2023 &lt;- read.csv(&quot;/Users/dougrose/Desktop/location/raw_statcast/mlbraw2023.csv&quot;) mlbraw2023$game_date &lt;- as.Date(mlbraw2023$game_date, format=&quot;%m/%d/%y&quot;) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(events = if_else(is.na(events) | events == &quot;&quot;, type, events)) %&gt;% mutate(events = if_else(events == &quot;B&quot;, &quot;ball&quot;, if_else(events == &quot;S&quot;, &quot;strike&quot;, events))) %&gt;% mutate(count = paste(balls, strikes, sep=&quot;-&quot;)) %&gt;% mutate(hand = paste(p_throws, stand, sep = &quot;v&quot;)) %&gt;% select(player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z) mlbraw2023 &lt;- mlbraw2023 %&gt;% filter(pitch_type %in% c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;FS&quot;,&quot;CH&quot;,&quot;CU&quot;, &quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;,&quot;SL&quot;,&quot;ST&quot;)) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_type2 = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;), &quot;CU&quot;, if_else(pitch_type %in% c(&quot;CH&quot;,&quot;FS&quot;), &quot;CH&quot;, if_else(pitch_type %in% c(&quot;SL&quot;,&quot;ST&quot;), &quot;SL&quot;, pitch_type)))) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(huge_lookup, join_by(hand==hand, pitch_type2==pitch_type, count==count, plate_x==x, plate_z==y)) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_type = if_else(pitch_type %in% c(&quot;CU&quot;,&quot;CS&quot;,&quot;KC&quot;,&quot;SV&quot;), &quot;CU&quot;, pitch_type)) %&gt;% select(-pitch_type2) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(pitch_name = if_else( pitch_name == &quot;4-Seam Fastball&quot;, &quot;Fastball&quot;, if_else(pitch_name %in% c(&quot;Curveball&quot;,&quot;Slow Curve&quot;,&quot;Knuckle Curve&quot;, &quot;Slurve&quot;), &quot;Curveball&quot;, if_else(pitch_name == &quot;Split-Finger&quot;, &quot;Splitter&quot;, pitch_name)))) 7.2 Location Quality by Pitch Type I’ll briefly profile the resulting pitch quality metric. Accounting for all pitches in 2023 with a corresponding pitch location quality number, here is the distribution of values based on pitch type. Across all 6 pitch type levels, a similar distribution pattern emerges. We see the highest peak of around 0.8 across all pitch types followed by a lower peak around 0.25. 4-Seam Fastballs, Sinkers, and Cutters have better overall pitch location values compared to Changeups. Changeups have a more even distribution of values from 0 to 1. Meaning we would expect pitchers throwing a high rate of Changeups in 2023 to generally score lower than other pitchers. ff &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;FF&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;4-seam fastballs&quot;)+ theme_classic() si &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;SI&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;sinkers&quot;)+ theme_classic() fc &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;FC&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;cutters&quot;)+ theme_classic() ch &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;CH&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;changeups&quot;)+ theme_classic() cu &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;CU&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;curveballs&quot;)+ theme_classic() sl &lt;- mlbraw2023 %&gt;% filter(pitch_type == &quot;SL&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.025) + ylim(0,0.06)+ ylab(&quot;sliders&quot;)+ theme_classic() ggarrange(ff, si, fc, ch, cu, sl, ncol=2, nrow=3) rm(ff, si, fc, ch, cu, sl) 7.3 Location Quality by Count zero_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-0&quot;)+ theme_classic() zero_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-1&quot;)+ theme_classic() zero_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;0-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;0-2&quot;)+ theme_classic() one_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-0&quot;)+ theme_classic() one_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-1&quot;)+ theme_classic() one_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;1-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;1-2&quot;)+ theme_classic() two_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-0&quot;)+ theme_classic() two_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-1&quot;)+ theme_classic() two_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;2-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;2-2&quot;)+ theme_classic() three_zero &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-0&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-0&quot;)+ theme_classic() three_one &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-1&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-1&quot;)+ theme_classic() three_two &lt;- mlbraw2023 %&gt;% filter(count == &quot;3-2&quot;) %&gt;% ggplot(aes(x = pq)) + geom_histogram(aes(y = after_stat(count / sum(count))), binwidth=0.01) + ylim(0,0.05)+ ylab(&quot;3-2&quot;)+ theme_classic() ggarrange(zero_zero, zero_one, zero_two, one_zero, one_one, one_two, two_zero, two_one, two_two, three_zero, three_one, three_two , ncol=3, nrow=4) rm(zero_zero, zero_one, zero_two, one_zero, one_one, one_two, two_zero, two_one, two_two, three_zero, three_one, three_two) 7.4 Final Cleaning Here is the final cleaning I’ll apply to the 2023 data frame before plugging it into a dashboard and view how pitchers ranked across this new pitch location metric. top100 &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% count() %&gt;% ungroup() %&gt;% arrange(desc(n)) %&gt;% head(100) %&gt;% select(-n) top100 &lt;- top100$player_name mlbraw2023 &lt;- mlbraw2023 %&gt;% filter(player_name %in% top100) mlbraw2023 &lt;- mlbraw2023 %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Su\\303\\241rez&quot;, &quot;Suarez&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Berr\\303\\255os, Jos\\303\\251&quot;, &quot;Berrios, Jose&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;P\\303\\251rez, Mart\\303\\255n&quot;, &quot;Perez, Martin&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;L\\303\\263pez&quot;, &quot;Lopez&quot;)) %&gt;% mutate(player_name = str_replace_all(player_name, &quot;Jes\\303\\272s&quot;, &quot;Jesus&quot;)) rm(top100) pitch_type_perc &lt;- mlbraw2023 %&gt;%group_by(player_name, pitch_type) %&gt;% count() %&gt;% ungroup() %&gt;% inner_join(mlbraw2023 %&gt;%group_by(player_name) %&gt;% count() %&gt;% ungroup(), join_by(player_name)) %&gt;% mutate(pitch_type_perc = 100*round(n.x/n.y, 2)) %&gt;% select(player_name, pitch_type, pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(pitch_type_perc, join_by(player_name, pitch_type)) rm(pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% separate(player_name, c(&quot;name1&quot;, &quot;name2&quot;), &quot;, &quot;) %&gt;% mutate(player_name = paste(name2, name1, sep = &quot; &quot;)) %&gt;% select(player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z, pq, pitch_type_perc) mlbraw2023 &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% summarise(pq=mean(pq)) %&gt;% ungroup() %&gt;% arrange(desc(pq)) %&gt;% mutate(rank = row_number()) %&gt;% mutate(player_rank = paste(rank, &quot; - &quot;, player_name)) %&gt;% inner_join(mlbraw2023, join_by(player_name)) %&gt;% rename(pq = pq.y) %&gt;% select(player_rank, player_name, pitch_type, pitch_name, count, hand, plate_x, plate_z, pq, pitch_type_perc) %&gt;% mutate(player_name = player_rank) %&gt;% select(-player_rank) mlbraw2023$pitch_type &lt;- factor(mlbraw2023$pitch_type, levels = c(&quot;FF&quot;,&quot;SI&quot;,&quot;FC&quot;,&quot;FS&quot;,&quot;CH&quot;,&quot;CU&quot;,&quot;SL&quot;,&quot;ST&quot;)) mlbraw2023$pitch_name &lt;- factor(mlbraw2023$pitch_name, levels = c(&quot;Sweeper&quot;,&quot;Slider&quot;,&quot;Curveball&quot;,&quot;Changeup&quot;, &quot;Splitter&quot;,&quot;Cutter&quot;,&quot;Sinker&quot;,&quot;Fastball&quot;)) color_pitch &lt;- tibble(pitch_name = unique(mlbraw2023$pitch_name), colors = c(&quot;#FBB4AE&quot;,&quot;#B3CDE3&quot;,&quot;#CCEBC5&quot;,&quot;#DECBE4&quot;, &quot;#FED9A6&quot;,&quot;#FFFFCC&quot;,&quot;#E5D8BD&quot;,&quot;#FDDAEC&quot;)) mlbraw2023 &lt;- mlbraw2023 %&gt;% inner_join(color_pitch, join_by(pitch_name)) rm(color_pitch) mlbraw2023$pq &lt;- as.double(mlbraw2023$pq) text &lt;- mlbraw2023 %&gt;% group_by(player_name) %&gt;% summarise(pq= round(mean(pq),3), .groups = &#39;drop&#39;) loli &lt;- mlbraw2023 %&gt;% group_by(player_name, pitch_name, pitch_type_perc, colors) %&gt;% summarise(pq= round(mean(pq),2), .groups = &#39;drop&#39;) %&gt;% filter(pitch_type_perc &gt; 2) bar &lt;- mlbraw2023 %&gt;% select(player_name, pq) pie &lt;- mlbraw2023 %&gt;% group_by(player_name, pitch_name, colors) %&gt;% count() %&gt;% inner_join(mlbraw2023 %&gt;% group_by(player_name) %&gt;% count(), join_by(player_name)) %&gt;% mutate(p=100*round(n.x/n.y, 2)) %&gt;% select(-n.x, -n.y) %&gt;% filter(p &gt; 2) write_csv(text,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/text.csv&quot;) write_csv(loli,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/loli.csv&quot;) write_csv(bar,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/bar.csv&quot;) write_csv(pie,&quot;/Users/dougrose/Desktop/pitch_location_quality/location_quality_app/pie.csv&quot;) "],["shiny-dashbaord.html", "Chapter 8 Shiny Dashbaord", " Chapter 8 Shiny Dashbaord https://drose1988.shinyapps.io/location_quality_app/ "],["project-takeaways-and-limitations.html", "Chapter 9 Project Takeaways and Limitations", " Chapter 9 Project Takeaways and Limitations I hope to test and update this metric further, evaluate to see how reliable the resulting value of a pitch location. There are a number of directions to go from here: track how a pitcher’s quality of location improves/declines over time, compare the metric with game results to see how strongly correlated it is with overall pitcher performance. For now, I’ll point out some shortcomings of this project metric at its current state. Perhaps most importantly, each pitch thrown of a distinct pitch type class gets evaluated the same regardless of all the other characteristics. A 4-Seam Fastball thrown by one pitcher can be of much higher quality than another pitcher in terms of velocity, spin rate, movement, release point etc. An 89 MPH fastball thrown to the top of the strike zone is a far worse pitch compared to a 99 MPH fastball in that same location. This metric would evaluate both pitch locations the same. However, I’ve purposely left out these factors from the metric. If a pitcher’s “stuff” rates extremely well, pitch location is simply not as important a factor in the overall quality of a pitch. Of the 288 data frames used to create individual plots, there is a wide range of observations between them. Because of this, some combinations of handedness, pitch type, and count yield a very defined plot with clear mapped out regions of good and bad location quality, while some combinations are more vague. Splitters(Split-Finger Fastballs) are evaluated using the same location quality as Changeups due to the lack of observations. The two pitches are quite similar in velocity and direction of movement, but also have distinct characteristics so in reality they shouldn’t be evaluated as the same pitch type. For simplicity purposes, outlier pitches (pitches falling outside of the range established by 99% of a particular pitch type) have been removed. And therefore, these regions have not been represented in the formation of the metric. For the time being, a pitcher who throws wild pitches more often than another pitcher is not discredited more even though he should. Overall, I hope the results from the project are insightful and bring a fresh new focus to the way we evaluate pitchers in 2023. Pitch location is important, and possibly under appreciated in today’s baseball analytics space so heavily centered around Statcast data. So hopefully this new location metric can move us one step closer towards a full picture of pitcher evaluations. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
